import { Discord, Slash, SlashOption, Guard } from "discordx";
import { CommandInteraction, ApplicationCommandOptionType } from "discord.js";
import { AppDataSource } from "../services/database.js";
import { User as DBUser } from "../entities/User.js";
import { ChannelGuard } from "../utils/decorators/ChannelGuard.js";
import { EnsureUser } from "../utils/decorators/EnsureUsers.js";
import { createErrorEmbed, createGiftResultEmbed, createSuccessEmbed } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";
import { Currency } from "../entities/Currency.js";
import { Cooldown } from "../utils/decorators/CoommandCooldown.js";
import { GiftReward } from "../types/giftTypes.js";
import { openGift } from "../utils/giftUtils.js";
import { GiftStats } from "../entities/GiftStats.js";
import { CheckMoney } from "../utils/decorators/CheckMoney.js";

@Discord()
class GiftCommand {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
    private readonly VOICE_MINUTES_PER_GIFT = 480; // 8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω—É—Ç

    @Slash({
        name: "gift",
        description: "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
    })
    @Guard(
        Cooldown({ hours: 24, message: "‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ {time}" }),
        ChannelGuard("user_commands_channel")
    )
    @EnsureUser()
    async gift(
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            const discordUser = interaction.user;
            
            const userRepository = AppDataSource.getRepository(DBUser);
            const dbUser = await userRepository.findOneOrFail({
                where: { discordId: discordUser.id },
                relations: ["currency"]
            });
            
            const results: GiftReward[] = [];
            let totalWin = 0;
            
            const reward = openGift();
            results.push(reward);
            
            if (reward.type === 'currency' && reward.amount) {
                totalWin += reward.amount;
            }
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            let giftStats = (await giftStatsRepository.findOne({
                where: { discordId: discordUser.id }
              }))!;
              
  
            
            // –ë–ª–∞–≥–æ–¥–∞—Ä—è EnsureUser, giftStats –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            giftStats.lastDailyGiftClaim = new Date();
            giftStats.totalGiftsClaimed += 1;
            await giftStatsRepository.save(giftStats);
            
            if (totalWin > 0) {
                const currencyRepository = AppDataSource.getRepository(Currency);
                await currencyRepository.increment(
                    { id: dbUser.currency.id },
                    "currencyCount",
                    totalWin
                );
            }
            
            const embed = createGiftResultEmbed(results, totalWin, 0, interaction);
            
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordUser.id} –æ—Ç–∫—Ä—ã–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏ –ø–æ–ª—É—á–∏–ª ${totalWin}$`);
            
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–∞—Ä–æ–∫:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∞—Ä–∫–∞", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }

    @Slash({
        name: "mygifts",
        description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö"
    })
    @Guard(
        ChannelGuard("user_commands_channel")
    )
    @EnsureUser()
    async mygifts(
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            const discordUser = interaction.user;
            
            const userRepository = AppDataSource.getRepository(DBUser);
            const dbUser = await userRepository.findOneOrFail({
                where: { discordId: discordUser.id }
            });
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            let giftStats = (await giftStatsRepository.findOne({
                where: { discordId: discordUser.id }
              }))!;
              
            
            // –ë–ª–∞–≥–æ–¥–∞—Ä—è EnsureUser, giftStats –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            
            const totalVoiceMinutes = Number(dbUser.voiceMinutes);
            
            // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º
            const potentialGifts = Math.floor(totalVoiceMinutes / this.VOICE_MINUTES_PER_GIFT);
            
            // –°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
            const claimedGifts = giftStats.claimedGiftsFromVoice;
            
            // –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–µ–π—á–∞—Å (–≤—Å–µ–≥–¥–∞ 0, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–∞—Ä–∫–∏ –≤—ã–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            const availableGifts = 0; // –ü–æ–¥–∞—Ä–∫–∏ –≤—ã–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
            // –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
            const minutesForNextGift = this.VOICE_MINUTES_PER_GIFT - (totalVoiceMinutes % this.VOICE_MINUTES_PER_GIFT);
            const hoursForNextGift = Math.floor(minutesForNextGift / 60);
            const remainingMinutes = minutesForNextGift % 60;
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–æ–¥–∞—Ä–∫–µ
            let dailyGiftInfo = "‚ùå –£–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è";
            if (!giftStats.lastDailyGiftClaim || isNextDayAvailable(giftStats.lastDailyGiftClaim)) {
                dailyGiftInfo = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è!";
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–¥–∞—Ä–∫–∞–º
            const embed = createSuccessEmbed(
                `**üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö**\n\n` +
                `‚è±Ô∏è –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö: **${Math.floor(totalVoiceMinutes / 60)} —á ${totalVoiceMinutes % 60} –º–∏–Ω**\n\n` +
                `**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n` +
                `üîÑ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: **${claimedGifts}**\n` +
                `‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞: **${hoursForNextGift} —á ${remainingMinutes} –º–∏–Ω**\n` +
                `‚ÑπÔ∏è –ü–æ–¥–∞—Ä–∫–∏ –≤—ã–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ\n\n` +
                `**üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫:**\n` +
                `${dailyGiftInfo}\n\n` +
                `**üìú –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                `üéÅ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–¥–∞—Ä–∫–æ–≤: **${giftStats.totalGiftsClaimed}**`,
                interaction.user
            );
            
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ mygifts:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }

    @Slash({
        name: "buygift",
        description: "–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤–∞–ª—é—Ç—É"
    })
    @Guard(
        ChannelGuard("user_commands_channel"),
        CheckMoney()
    )
    @EnsureUser()
    async buygift(
        @SlashOption({
            name: "bet",
            description: "–°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ (500$ –∑–∞ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫)",
            type: ApplicationCommandOptionType.Integer,
            required: true,
            minValue: 500,
            maxValue: 5000
        })
        bet: number,
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            const discordUser = interaction.user;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const userRepository = AppDataSource.getRepository(DBUser);
            const dbUser = await userRepository.findOneOrFail({
                where: { discordId: discordUser.id },
                relations: ["currency"]
            });
            
            const currencyRepository = AppDataSource.getRepository(Currency);
            
            // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
            const giftCost = 500;
            
            // –°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
            const giftCount = Math.floor(bet / giftCost);
            const totalCost = giftCount * giftCost;
            
            if (giftCount <= 0) {
                const errorEmbed = createErrorEmbed(
                    `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞: ${giftCost}$`,
                    interaction.user
                );
                return await interaction.editReply({ embeds: [errorEmbed] });
            }
            
            // –°–Ω–∏–º–∞–µ–º –≤–∞–ª—é—Ç—É
            const newBalance = dbUser.currency.currencyCount - BigInt(totalCost);
            await currencyRepository.update(
                { id: dbUser.currency.id },
                { currencyCount: newBalance }
            );
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
            const results: GiftReward[] = [];
            let totalWin = 0;
            
            for (let i = 0; i < giftCount; i++) {
                const reward = openGift();
                results.push(reward);
                
                if (reward.type === 'currency' && reward.amount) {
                    totalWin += reward.amount;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            let giftStats = (await giftStatsRepository.findOne({
                where: { discordId: discordUser.id }
              }))!;
              
            
            giftStats.totalGiftsClaimed += giftCount;
            await giftStatsRepository.save(giftStats);
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
            if (totalWin > 0) {
                await currencyRepository.increment(
                    { id: dbUser.currency.id },
                    "currencyCount",
                    totalWin
                );
            }
            
            const firstResult = results[0];
            const oneResults = [firstResult];
            const embed = createGiftResultEmbed(oneResults, totalWin, totalCost, interaction);
            
            if (giftCount > 1) {
                embed.setTitle(`üéÅ –û—Ç–∫—Ä—ã—Ç–∏–µ ${giftCount} –ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ`);
                embed.setDescription(`<@${interaction.user.id}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç ${giftCount} –ø–æ–¥–∞—Ä–∫–æ–≤!`);
            }
            
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordUser.id} –∫—É–ø–∏–ª ${giftCount} –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ ${totalCost}$ –∏ –ø–æ–ª—É—á–∏–ª ${totalWin}$`);
            
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ buygift:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
 * @param lastClaimDate –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
 * @returns true, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
 */
function isNextDayAvailable(lastClaimDate: Date): boolean {
    const now = new Date();
    const timeDiff = now.getTime() - lastClaimDate.getTime(); 
    const hoursDiff = timeDiff / (1000 * 60 * 60);
    
    return hoursDiff >= 24;
}

export default GiftCommand;