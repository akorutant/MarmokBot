import { Discord, Slash, SlashOption, Guard, SlashGroup } from "discordx";
import { CommandInteraction, ApplicationCommandOptionType } from "discord.js";
import { AppDataSource } from "../services/database.js";
import { User as DBUser } from "../entities/User.js";
import { ChannelGuard } from "../utils/decorators/ChannelGuard.js";
import { EnsureUser } from "../utils/decorators/EnsureUsers.js";
import { createErrorEmbed, createGiftListEmbed, createGiftResultEmbed, createSuccessEmbed } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";
import { Currency } from "../entities/Currency.js";
import { GiftReward } from "../types/giftTypes.js";
import { openGift, pluralizeGifts } from "../utils/giftUtils.js";
import { GiftStats } from "../entities/GiftStats.js";
import { EnsureUserGuard } from "../utils/decorators/EnsureUserGuard.js";
import { RequireRoles } from "../utils/decorators/RequireRoles.js";

@Discord()
class MyGiftsCommand {
    private readonly VOICE_MINUTES_PER_GIFT = 480;

    @Slash({
        name: "mygifts",
        description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö"
    })
    @EnsureUser()
    @Guard(
        ChannelGuard("user_commands_channel"),
        EnsureUserGuard()
    )
    async mygifts(
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            const discordUser = interaction.user;
            
            const userRepository = AppDataSource.getRepository(DBUser);
            const dbUser = await userRepository.findOneOrFail({
                where: { discordId: discordUser.id }
            });
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            const giftStats = await giftStatsRepository.findOneOrFail({
                where: { discordId: discordUser.id }
            });
              
            const totalVoiceMinutes = Number(dbUser.voiceMinutes);
            
            const potentialGifts = Math.floor(totalVoiceMinutes / this.VOICE_MINUTES_PER_GIFT);
            
            const claimedGifts = giftStats.claimedGiftsFromVoice;
            const availableGifts = giftStats.availableGifts;
            
            const minutesForNextGift = this.VOICE_MINUTES_PER_GIFT - (totalVoiceMinutes % this.VOICE_MINUTES_PER_GIFT);
            const hoursForNextGift = Math.floor(minutesForNextGift / 60);
            const remainingMinutes = minutesForNextGift % 60;
            
            const embed = createGiftListEmbed(
                interaction.user,
                totalVoiceMinutes,
                availableGifts,
                claimedGifts,
                hoursForNextGift,
                remainingMinutes,
                giftStats
            );
            
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ mygifts:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
}

@Discord()
class OpenGiftCommand {
    @Slash({
        name: "opengift",
        description: "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
    })
    @EnsureUser()
    @Guard(
        ChannelGuard("user_commands_channel"),
        EnsureUserGuard()
    )
    async opengift(
        @SlashOption({
            name: "amount",
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)",
            type: ApplicationCommandOptionType.Integer,
            required: false,
            minValue: 1,
            maxValue: 10
        })
        amount: number = 1,
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            const discordUser = interaction.user;
            
            const userRepository = AppDataSource.getRepository(DBUser);
            const dbUser = await userRepository.findOneOrFail({
                where: { discordId: discordUser.id },
                relations: ["currency"]
            });
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            const giftStats = await giftStatsRepository.findOneOrFail({
                where: { discordId: discordUser.id }
            });
            
            if (giftStats.availableGifts <= 0) {
                const errorEmbed = createErrorEmbed(
                    "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è. –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏!",
                    interaction.user
                );
                return await interaction.editReply({ embeds: [errorEmbed] });
            }
            
            const giftsToOpen = Math.min(amount, giftStats.availableGifts);
            
            const results: GiftReward[] = [];
            let totalWin = 0;
            
            for (let i = 0; i < giftsToOpen; i++) {
                const reward = openGift();
                results.push(reward);
                
                if (reward.type === 'currency' && reward.amount) {
                    totalWin += reward.amount;
                }
            }
            
            giftStats.availableGifts -= giftsToOpen;
            giftStats.totalGiftsClaimed += giftsToOpen;
            await giftStatsRepository.save(giftStats);
            
            if (totalWin > 0) {
                const currencyRepository = AppDataSource.getRepository(Currency);
                await currencyRepository.increment(
                    { id: dbUser.currency.id },
                    "currencyCount",
                    totalWin
                );
            }
            
            const embed = createGiftResultEmbed(results, totalWin, 0, interaction);
            
            if (giftsToOpen > 1) {
                embed.setTitle(`üéÅ –û—Ç–∫—Ä—ã—Ç–∏–µ ${giftsToOpen} ${pluralizeGifts(giftsToOpen)} üéÅ`);
                embed.setDescription(`<@${interaction.user.id}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç ${giftsToOpen} ${pluralizeGifts(giftsToOpen)}!`);
            }
            
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordUser.id} –æ—Ç–∫—Ä—ã–ª ${giftsToOpen} –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª ${totalWin}$`);
            
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ opengift:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∞—Ä–∫–∞", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
}

@Discord()
@SlashGroup({ 
    description: "–ö–æ–º–∞–Ω–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ [–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä]", 
    name: "gift",
    defaultMemberPermissions: "0", 
    dmPermission: false, 
})
@SlashGroup("gift")
class GiftModCommands {
    @Slash({
        name: "add",
        description: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä]"
    })
    @EnsureUser()
    @Guard(
        EnsureUserGuard(),
        RequireRoles(["high_mod_level", "medium_mod_level"])
    )
    async add(
        @SlashOption({
            name: "user",
            description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏",
            type: ApplicationCommandOptionType.User,
            required: true
        })
        user: any,
        
        @SlashOption({
            name: "amount",
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            type: ApplicationCommandOptionType.Integer,
            required: true,
            minValue: 1
        })
        amount: number,
        
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
            
            const targetUserId = user.id;
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            const giftStats = await giftStatsRepository.findOneOrFail({
                where: { discordId: targetUserId }
            });
            
            giftStats.availableGifts += amount;
            await giftStatsRepository.save(giftStats);
            
            const successEmbed = createSuccessEmbed(
                `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ **${amount} ${pluralizeGifts(amount)}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${targetUserId}>.\n` +
                `–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ: **${giftStats.availableGifts} ${pluralizeGifts(giftStats.availableGifts)}**`,
                interaction.user
            );
            
            logger.info(`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.user.id} –¥–æ–±–∞–≤–∏–ª ${amount} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
            
            await interaction.editReply({ embeds: [successEmbed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ addgifts:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
    
    @Slash({
        name: "remove",
        description: "–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä]"
    })
    @EnsureUser()
    @Guard(
        EnsureUserGuard(),
        RequireRoles(["high_mod_level", "medium_mod_level"])
    )
    async remove(
        @SlashOption({
            name: "user",
            description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏",
            type: ApplicationCommandOptionType.User,
            required: true
        })
        user: any,
        
        @SlashOption({
            name: "amount",
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            type: ApplicationCommandOptionType.Integer,
            required: true,
            minValue: 1
        })
        amount: number,
        
        interaction: CommandInteraction
    ) {
        try {
            await interaction.deferReply();
         
            const targetUserId = user.id;
            
            const giftStatsRepository = AppDataSource.getRepository(GiftStats);
            const giftStats = await giftStatsRepository.findOneOrFail({
                where: { discordId: targetUserId }
            });
            
            const giftsToRemove = Math.min(amount, giftStats.availableGifts);
            giftStats.availableGifts -= giftsToRemove;
            await giftStatsRepository.save(giftStats);
            
            const successEmbed = createSuccessEmbed(
                `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ **${giftsToRemove} ${pluralizeGifts(giftsToRemove)}** —É <@${targetUserId}>.\n` +
                `–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ: **${giftStats.availableGifts} ${pluralizeGifts(giftStats.availableGifts)}**`,
                interaction.user
            );
            
            logger.info(`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.user.id} —É–¥–∞–ª–∏–ª ${giftsToRemove} –ø–æ–¥–∞—Ä–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
            
            await interaction.editReply({ embeds: [successEmbed] });
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ removegifts:", error);
            const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤", interaction.user);
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
}

export { MyGiftsCommand, OpenGiftCommand, GiftModCommands };