import { Discord, Once, SelectMenuComponent } from "discordx";
import { 
    Client, 
    ActionRowBuilder, 
    StringSelectMenuBuilder, 
    StringSelectMenuOptionBuilder,
    StringSelectMenuInteraction,
    TextChannel,
    GuildMember
} from "discord.js";
import { AppDataSource } from "../services/database.js";
import { Config } from "../entities/Config.js";
import { createEmbed, EmbedColors } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";

@Discord()
export class RoleSelector {
    @Once({ event: "ready" })
    async onReady([client]: [Client]): Promise<void> {
        try {
            const configRepository = AppDataSource.getRepository(Config);
            const roleChannels = await configRepository.find({ where: { key: "give_role_chat" } });
            
            if (roleChannels.length) {
                logger.info(`–ù–∞–π–¥–µ–Ω–æ ${roleChannels.length} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π`);
            }
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é —Ä–æ–ª–µ–π –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é —Ä–æ–ª–µ–π: ${error}`);
        }
    }
    
    async createRoleMenu(channelId: string, client: Client): Promise<void> {
        try {
            const configRepository = AppDataSource.getRepository(Config);
            
            const roleConfigs = await configRepository.find({ where: { key: "give_role_id" } });
            
            if (!roleConfigs.length) {
                logger.error("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏");
                return;
            }
            
            const channel = client.channels.cache.get(channelId) as TextChannel;
            if (!channel || !channel.isTextBased()) {
                logger.error(`–ö–∞–Ω–∞–ª ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º`);
                return;
            }
            
            const allRoleDescs = await configRepository.find({
                where: { key: "role_description" }
            });
            
            const roleDescriptions: Record<string, string> = {};
            for (const desc of allRoleDescs) {
                const [id, ...descParts] = desc.value.split(":");
                if (id) {
                    roleDescriptions[id] = descParts.join(":");
                }
            }
            
            const availableRoles = [];
            for (const roleConfig of roleConfigs) {
                const guild = channel.guild;
                const role = guild.roles.cache.get(roleConfig.value);
                if (role) {
                    availableRoles.push(role);
                }
            }
            
            if (!availableRoles.length) {
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏");
                return;
            }
            
            logger.info("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: " + JSON.stringify(availableRoles.map(role => role.id)));
            
            const options = availableRoles.map(role => {
                const option = new StringSelectMenuOptionBuilder()
                    .setLabel(role.name)
                    .setValue(role.id);
                
                const description = roleDescriptions[role.id] || `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å/—É–±—Ä–∞—Ç—å —Ä–æ–ª—å ${role.name}`;
                option.setDescription(description.substring(0, 100)); 
                
                return option;
            });
            
            const select = new StringSelectMenuBuilder()
                .setCustomId('select-role')
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å')
                .addOptions(options);
                
            const row = new ActionRowBuilder<StringSelectMenuBuilder>()
                .addComponents(select);
            
            const embed = createEmbed({
                title: "üé≠ –í—ã–±–æ—Ä —Ä–æ–ª–µ–π",
                description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë. –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
                color: EmbedColors.INFO,
                fields: [
                    {
                        name: "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏",
                        value: availableRoles.map(role => {
                            const desc = roleDescriptions[role.id] ? 
                                ` - ${roleDescriptions[role.id]}` : '';
                            return `‚Ä¢ **${role.name}**${desc}`;
                        }).join('\n')
                    }
                ]
            });
            
            await channel.send({
                embeds: [embed],
                components: [row]
            });
            
            logger.info(`–°–æ–∑–¥–∞–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ ${channel.name}`);
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é —Ä–æ–ª–µ–π: ${error}`);
        }
    }
    
    @SelectMenuComponent({ id: "select-role" })
    async handleRoleSelection(interaction: StringSelectMenuInteraction): Promise<void> {
        await interaction.deferReply({ ephemeral: true }).catch(error => {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ: ${error}`);
            return;
        });
        
        try {
            const selectedRoleId = interaction.values[0];
            const selectedRole = interaction.guild?.roles.cache.get(selectedRoleId);
            
            if (!selectedRole) {
                await interaction.editReply({
                    content: '‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
                }).catch(error => {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–æ–ª–∏: ${error}`);
                });
                return;
            }
            
            if (!interaction.member || !(interaction.member instanceof GuildMember)) {
                await interaction.editReply({
                    content: '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.'
                }).catch(error => {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${error}`);
                });
                return;
            }
            
            const member = interaction.member as GuildMember;
            
            logger.info("–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + JSON.stringify(Array.from(member.roles.cache.keys())));
            
            if (member.roles.cache.has(selectedRoleId)) {
                try {
                    await member.roles.remove(selectedRoleId);
                    await interaction.editReply({
                        content: `‚úÖ –†–æ–ª—å ${selectedRole.name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`
                    }).catch(error => {
                        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: ${error}`);
                    });
                    logger.info(`–†–æ–ª—å ${selectedRole.name} —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.username}`);
                } catch (roleError) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: ${roleError}`);
                    await interaction.editReply({
                        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤.'
                    }).catch(error => {
                        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–± –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: ${error}`);
                    });
                }
            } else {
                try {
                    await member.roles.add(selectedRoleId);
                    await interaction.editReply({
                        content: `‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å ${selectedRole.name}!`
                    }).catch(error => {
                        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: ${error}`);
                    });
                    logger.info(`–†–æ–ª—å ${selectedRole.name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${interaction.user.username}`);
                } catch (roleError) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: ${roleError}`);
                    await interaction.editReply({
                        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤.'
                    }).catch(error => {
                        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: ${error}`);
                    });
                }
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: ${error}`);
            try {
                await interaction.editReply({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–µ–π.'
                });
            } catch (replyError) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: ${replyError}`);
            }
        }
    }
}