import { Discord, ButtonComponent, ModalComponent } from "discordx";
import { 
  ButtonInteraction,
  ModalSubmitInteraction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  Colors,
  TextChannel
} from "discord.js";
import { AppDataSource } from "../services/database.js";
import { User as DBUser } from "../entities/User.js";
import { Config } from "../entities/Config.js";
import { RoleApproval, ApprovalStatus } from "../entities/RoleApproval.js";
import { RoleApprovalService } from "../services/roleApprovalService.js";
import { RequireRoles } from "../utils/decorators/RequireRoles.js";
import { EnsureUserGuard } from "../utils/decorators/EnsureUserGuard.js";
import { createErrorEmbed } from "../utils/embedBuilder.js";
import { userHasAnyRoleFromConfig } from "../utils/userHasAnyRoleFromConfig.js";
import logger from "../services/logger.js";
import { bot } from "../main.js";

@Discord()
class RoleModerationCommands {
  private approvalService = RoleApprovalService.getInstance();

  @ButtonComponent({ id: /^approve_role_\d+$/ })
  async handleApproveRole(interaction: ButtonInteraction) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const hasPermission = await userHasAnyRoleFromConfig(
        interaction, 
        ["low_mod_level", "medium_mod_level", "high_mod_level"]
      );

      if (!hasPermission) {
        await interaction.reply({
          content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π",
          ephemeral: true
        });
        return;
      }

      const approvalId = parseInt(interaction.customId.split('_')[2]);
      
      const dbModerator = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      const result = await this.approvalService.approveRole(approvalId, dbModerator.id);

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const approvedEmbed = new EmbedBuilder()
          .setTitle("‚úÖ –†–æ–ª—å –æ–¥–æ–±—Ä–µ–Ω–∞")
          .setDescription("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
          .addFields(
            { name: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value: `<@${interaction.user.id}>`, inline: true },
            { name: "–í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è", value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
          )
          .setColor(Colors.Green)
          .setTimestamp();

        await interaction.update({ 
          embeds: [approvedEmbed], 
          components: [] 
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.notifyUser(approvalId, true);

        logger.info(`Role approval ${approvalId} approved by ${interaction.user.id}`);
      } else {
        const errorEmbed = createErrorEmbed(result.message, interaction.user);
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

    } catch (error) {
      logger.error("Error in handleApproveRole:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ä–æ–ª–∏", interaction.user);
      await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
  }

  @ButtonComponent({ id: /^reject_role_\d+$/ })
  async handleRejectRole(interaction: ButtonInteraction) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const hasPermission = await userHasAnyRoleFromConfig(
        interaction,
        ["low_mod_level", "medium_mod_level", "high_mod_level"]
      );

      if (!hasPermission) {
        await interaction.reply({
          content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π",
          ephemeral: true
        });
        return;
      }

      const approvalId = parseInt(interaction.customId.split('_')[2]);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      const modal = new ModalBuilder()
        .setCustomId(`rejection_modal_${approvalId}`)
        .setTitle("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å");

      const reasonInput = new TextInputBuilder()
        .setCustomId("rejection_reason")
        .setLabel("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        .setStyle(TextInputStyle.Paragraph)
        .setMinLength(10)
        .setMaxLength(500)
        .setPlaceholder("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...")
        .setRequired(true);

      const reasonRow = new ActionRowBuilder<TextInputBuilder>().addComponents(reasonInput);
      modal.addComponents(reasonRow);

      await interaction.showModal(modal);

    } catch (error) {
      logger.error("Error in handleRejectRole:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", interaction.user);
      await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
  }

  @ModalComponent({ id: /^rejection_modal_\d+$/ })
  async handleRejectionModal(interaction: ModalSubmitInteraction) {
    try {
      await interaction.deferUpdate();

      const approvalId = parseInt(interaction.customId.split('_')[2]);
      const rejectionReason = interaction.fields.getTextInputValue("rejection_reason").trim();

      const dbModerator = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      const result = await this.approvalService.rejectRole(
        approvalId, 
        dbModerator.id, 
        rejectionReason
      );

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const rejectedEmbed = new EmbedBuilder()
          .setTitle("‚ùå –†–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
          .setDescription("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
          .addFields(
            { name: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value: `<@${interaction.user.id}>`, inline: true },
            { name: "–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true },
            { name: "–ü—Ä–∏—á–∏–Ω–∞", value: rejectionReason, inline: false }
          )
          .setColor(Colors.Red)
          .setTimestamp();

        await interaction.editReply({ 
          embeds: [rejectedEmbed], 
          components: [] 
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.notifyUser(approvalId, false, rejectionReason);

        logger.info(`Role approval ${approvalId} rejected by ${interaction.user.id}: ${rejectionReason}`);
      } else {
        const errorEmbed = createErrorEmbed(result.message, interaction.user);
        await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
      }

    } catch (error) {
      logger.error("Error in handleRejectionModal:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", interaction.user);
      await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  private async notifyUser(
    approvalId: number, 
    approved: boolean, 
    rejectionReason?: string
  ): Promise<void> {
    try {
      const approval = await this.approvalService.getApproval(approvalId);
      if (!approval) {
        logger.error(`Approval ${approvalId} not found for notification`);
        return;
      }

      const user = await bot.users.fetch(approval.user.discordId);
      if (!user) {
        logger.warn(`User ${approval.user.discordId} not found for notification`);
        return;
      }

      let embed: EmbedBuilder;
      
      if (approved) {
        embed = new EmbedBuilder()
          .setTitle("üéâ –í–∞—à–∞ —Ä–æ–ª—å –æ–¥–æ–±—Ä–µ–Ω–∞!")
          .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å **${approval.roleName}** –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.`)
          .addFields(
            { name: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value: approval.roleName, inline: true },
            { name: "–¶–≤–µ—Ç", value: approval.roleColor, inline: true },
            { name: "ID –∑–∞—è–≤–∫–∏", value: `#${approval.id}`, inline: true }
          )
          .setColor(parseInt(approval.roleColor.replace('#', ''), 16))
          .setTimestamp()
          .setFooter({ text: "–†–æ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" });
      } else {
        embed = new EmbedBuilder()
          .setTitle("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
          .setDescription(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å **${approval.roleName}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
          .addFields(
            { name: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value: approval.roleName, inline: true },
            { name: "ID –∑–∞—è–≤–∫–∏", value: `#${approval.id}`, inline: true },
            { name: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", value: rejectionReason || "–ù–µ —É–∫–∞–∑–∞–Ω–∞", inline: false }
          )
          .setColor(Colors.Red)
          .setTimestamp()
          .setFooter({ text: "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π" });
      }

      try {
        await user.send({ embeds: [embed] });
        logger.info(`Notification sent to user ${approval.user.discordId} for approval ${approvalId}`);
      } catch (dmError) {
        logger.warn(`Failed to send DM to user ${approval.user.discordId}, trying fallback channel`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∫–∞–∫ fallback
        const fallbackChannelConfig = await AppDataSource.getRepository(Config).findOne({
          where: { key: "user_commands_channel" }
        });

        if (fallbackChannelConfig) {
          const channel = await bot.channels.fetch(fallbackChannelConfig.value) as TextChannel;
          if (channel) {
            const publicEmbed = embed.setDescription(
              `<@${approval.user.discordId}>, ${embed.data.description}`
            );
            await channel.send({ embeds: [publicEmbed] });
            logger.info(`Fallback notification sent for approval ${approvalId}`);
          }
        }
      }

    } catch (error) {
      logger.error(`Error sending notification for approval ${approvalId}:`, error);
    }
  }
}

export default RoleModerationCommands;