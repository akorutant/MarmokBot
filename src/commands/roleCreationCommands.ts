import { Discord, Slash, SlashGroup, Guard, ButtonComponent, ModalComponent } from "discordx";
import { 
  CommandInteraction,
  ModalSubmitInteraction,
  ButtonInteraction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  Colors,
  TextChannel
} from "discord.js";
import { AppDataSource } from "../services/database.js";
import { User as DBUser } from "../entities/User.js";
import { Config } from "../entities/Config.js";
import { RoleApproval } from "../entities/RoleApproval.js";
import { RoleApprovalService } from "../services/roleApprovalService.js";
import { ChannelGuard } from "../utils/decorators/ChannelGuard.js";
import { EnsureUserGuard } from "../utils/decorators/EnsureUserGuard.js";
import { RequireRoles } from "../utils/decorators/RequireRoles.js";
import { Cooldown } from "../utils/decorators/CoommandCooldown.js";
import { createErrorEmbed } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";

@Discord()
@SlashGroup({
  description: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π",
  name: "rolecreate",
  dmPermission: false,
})
@SlashGroup("rolecreate")
class RoleCreationCommands {
  private approvalService = RoleApprovalService.getInstance();

  @Slash({
    name: "request",
    description: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏"
  })
  @Guard(
    ChannelGuard("user_commands_channel"),
    EnsureUserGuard(),
    Cooldown({ minutes: 5 })
  )
  async requestRole(interaction: CommandInteraction) {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–∏
      const modal = new ModalBuilder()
        .setCustomId("role_creation_modal")
        .setTitle("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏");

      const nameInput = new TextInputBuilder()
        .setCustomId("role_name")
        .setLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
        .setStyle(TextInputStyle.Short)
        .setMinLength(2)
        .setMaxLength(50)
        .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏...")
        .setRequired(true);

      const colorInput = new TextInputBuilder()
        .setCustomId("role_color")
        .setLabel("–¶–≤–µ—Ç —Ä–æ–ª–∏ (HEX)")
        .setStyle(TextInputStyle.Short)
        .setMinLength(7)
        .setMaxLength(7)
        .setPlaceholder("#FF0000")
        .setRequired(true);

      const nameRow = new ActionRowBuilder<TextInputBuilder>().addComponents(nameInput);
      const colorRow = new ActionRowBuilder<TextInputBuilder>().addComponents(colorInput);

      modal.addComponents(nameRow, colorRow);

      await interaction.showModal(modal);

    } catch (error) {
      logger.error("Error in requestRole command:", error);
      
      if (!interaction.replied) {
        const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏", interaction.user);
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }
  }

  @ModalComponent({ id: "role_creation_modal" })
  async handleRoleCreationModal(interaction: ModalSubmitInteraction) {
    try {
      await interaction.deferReply({ ephemeral: true });

      const roleName = interaction.fields.getTextInputValue("role_name").trim();
      const roleColor = interaction.fields.getTextInputValue("role_color").trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
      if (roleName.length < 2 || roleName.length > 50) {
        const errorEmbed = createErrorEmbed(
          "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤",
          interaction.user
        );
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–∞
      const colorRegex = /^#[0-9A-Fa-f]{6}$/;
      if (!colorRegex.test(roleColor)) {
        const errorEmbed = createErrorEmbed(
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX —Ñ–æ—Ä–º–∞—Ç: #FF0000",
          interaction.user
        );
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
      const bannedWords = ['admin', 'mod', 'owner', 'staff', 'everyone', 'here'];
      const lowerName = roleName.toLowerCase();
      if (bannedWords.some(word => lowerName.includes(word))) {
        const errorEmbed = createErrorEmbed(
          "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",
          interaction.user
        );
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      const dbUser = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const result = await this.approvalService.createRoleRequest(
        dbUser.id,
        roleName,
        roleColor,
        {
          guildId: interaction.guildId!,
          interactionId: interaction.id
        }
      );

      if (result.success) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await this.sendModerationRequest(result.approvalId!, roleName, roleColor, interaction.user.id);

        const successEmbed = new EmbedBuilder()
          .setTitle("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
          .setDescription(result.message)
          .addFields(
            { name: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value: roleName, inline: true },
            { name: "–¶–≤–µ—Ç", value: roleColor, inline: true },
            { name: "ID –∑–∞—è–≤–∫–∏", value: `#${result.approvalId}`, inline: true }
          )
          .setColor(parseInt(roleColor.replace('#', ''), 16))
          .setTimestamp();

        await interaction.editReply({ embeds: [successEmbed] });
      } else {
        const errorEmbed = createErrorEmbed(result.message, interaction.user);
        await interaction.editReply({ embeds: [errorEmbed] });
      }

    } catch (error) {
      logger.error("Error handling role creation modal:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "mystatus",
    description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–æ–ª–∏"
  })
  @Guard(
    ChannelGuard("user_commands_channel"),
    EnsureUserGuard()
  )
  async myStatus(interaction: CommandInteraction) {
    try {
      await interaction.deferReply({ ephemeral: true });

      const dbUser = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      const pendingApprovals = await this.approvalService.getUserPendingApprovals(dbUser.id);

      const embed = new EmbedBuilder()
        .setTitle("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª–∏")
        .setColor(Colors.Blue)
        .setTimestamp();

      if (pendingApprovals.length === 0) {
        embed.setDescription("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π");
      } else {
        let description = "";
        for (const approval of pendingApprovals) {
          description += `**#${approval.id}** - ${approval.roleName}\n`;
          description += `üé® –¶–≤–µ—Ç: ${approval.roleColor}\n`;
          description += `üìÖ –°–æ–∑–¥–∞–Ω–∞: <t:${Math.floor(approval.createdAt.getTime() / 1000)}:R>\n\n`;
        }
        embed.setDescription(description);
      }

      const buttons = new ActionRowBuilder<ButtonBuilder>();
      
      if (pendingApprovals.length > 0) {
        buttons.addComponents(
          new ButtonBuilder()
            .setCustomId("cancel_role_request")
            .setLabel("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
            .setStyle(ButtonStyle.Danger)
            .setEmoji("‚ùå")
        );
      }

      buttons.addComponents(
        new ButtonBuilder()
          .setCustomId("create_new_role")
          .setLabel("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
          .setStyle(ButtonStyle.Primary)
          .setEmoji("‚ûï")
      );

      await interaction.editReply({ 
        embeds: [embed], 
        components: [buttons]
      });

    } catch (error) {
      logger.error("Error in myStatus command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  @ButtonComponent({ id: "create_new_role" })
  async handleCreateNewRole(interaction: ButtonInteraction) {
    try {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –∫–æ–º–∞–Ω–¥–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
      await this.requestRole(interaction as any);
    } catch (error) {
      logger.error("Error in handleCreateNewRole:", error);
    }
  }

  @ButtonComponent({ id: "cancel_role_request" })
  async handleCancelRequest(interaction: ButtonInteraction) {
    try {
      const dbUser = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      const pendingApprovals = await this.approvalService.getUserPendingApprovals(dbUser.id);

      if (pendingApprovals.length === 0) {
        await interaction.reply({
          content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
          ephemeral: true
        });
        return;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë —Å—Ä–∞–∑—É
      if (pendingApprovals.length === 1) {
        const result = await this.approvalService.cancelRequest(dbUser.id, pendingApprovals[0].id);
        
        const embed = new EmbedBuilder()
          .setTitle(result.success ? "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" : "‚ùå –û—à–∏–±–∫–∞")
          .setDescription(result.message)
          .setColor(result.success ? Colors.Green : Colors.Red)
          .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
        return;
      }

      // –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      const buttons = new ActionRowBuilder<ButtonBuilder>();
      
      for (let i = 0; i < Math.min(pendingApprovals.length, 5); i++) {
        const approval = pendingApprovals[i];
        buttons.addComponents(
          new ButtonBuilder()
            .setCustomId(`cancel_approval_${approval.id}`)
            .setLabel(`#${approval.id} - ${approval.roleName}`)
            .setStyle(ButtonStyle.Danger)
        );
      }

      const embed = new EmbedBuilder()
        .setTitle("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")
        .setColor(Colors.Orange);

      await interaction.reply({ 
        embeds: [embed], 
        components: [buttons],
        ephemeral: true
      });

    } catch (error) {
      logger.error("Error in handleCancelRequest:", error);
      await interaction.reply({
        content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏",
        ephemeral: true
      });
    }
  }

  @ButtonComponent({ id: /^cancel_approval_\d+$/ })
  async handleCancelSpecificApproval(interaction: ButtonInteraction) {
    try {
      await interaction.deferUpdate();
      
      const approvalId = parseInt(interaction.customId.split('_')[2]);
      
      const dbUser = await AppDataSource.getRepository(DBUser).findOneOrFail({
        where: { discordId: interaction.user.id }
      });

      const result = await this.approvalService.cancelRequest(dbUser.id, approvalId);
      
      const embed = new EmbedBuilder()
        .setTitle(result.success ? "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" : "‚ùå –û—à–∏–±–∫–∞")
        .setDescription(result.message)
        .setColor(result.success ? Colors.Green : Colors.Red)
        .setTimestamp();

      await interaction.editReply({ embeds: [embed], components: [] });

    } catch (error) {
      logger.error("Error in handleCancelSpecificApproval:", error);
      const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed], components: [] });
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
  private async sendModerationRequest(
    approvalId: number, 
    roleName: string, 
    roleColor: string, 
    userId: string
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      const configRepository = AppDataSource.getRepository(Config);
      const moderationChannelConfig = await configRepository.findOne({
        where: { key: "moderation_channel" }
      });

      if (!moderationChannelConfig || !moderationChannelConfig.value) {
        logger.warn("Moderation channel not configured");
        return;
      }

      const moderationChannel = await interaction.client.channels.fetch(moderationChannelConfig.value) as TextChannel;
      
      if (!moderationChannel) {
        logger.error("Moderation channel not found");
        return;
      }

      const embed = new EmbedBuilder()
        .setTitle("üé≠ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏")
        .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${userId}> –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏`)
        .addFields(
          { name: "ID –∑–∞—è–≤–∫–∏", value: `#${approvalId}`, inline: true },
          { name: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value: roleName, inline: true },
          { name: "–¶–≤–µ—Ç", value: roleColor, inline: true }
        )
        .setColor(parseInt(roleColor.replace('#', ''), 16))
        .setTimestamp();

      const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId(`approve_role_${approvalId}`)
          .setLabel("–û–¥–æ–±—Ä–∏—Ç—å")
          .setStyle(ButtonStyle.Success)
          .setEmoji("‚úÖ"),
        new ButtonBuilder()
          .setCustomId(`reject_role_${approvalId}`)
          .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
          .setStyle(ButtonStyle.Danger)
          .setEmoji("‚ùå")
      );

      await moderationChannel.send({ embeds: [embed], components: [buttons] });

    } catch (error) {
      logger.error("Error sending moderation request:", error);
    }
  }
}

export default RoleCreationCommands;