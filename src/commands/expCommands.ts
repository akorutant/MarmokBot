import { Discord, SlashGroup, Slash, SlashOption, Guard } from "discordx";
import { CommandInteraction, User as DiscordUser, ApplicationCommandOptionType } from "discord.js";
import { ChannelGuard } from "../utils/decorators/ChannelGuard.js";
import { AppDataSource } from "../services/database.js";
import { User } from "../entities/User.js";
import { Exp } from "../entities/Exp.js";
import { RequireRoles } from "../utils/decorators/RequireRoles.js";
import { EnsureUser } from "../utils/decorators/EnsureUsers.js";
import {
  calculateNextLevelExp,
  getMaxLevelForExp,
  getExpToNextLevel,
  getDaysToNextLevel,
  isMaxLevel
} from "../utils/levelUpUtils.js";

import {
  createErrorEmbed,
  createSuccessEmbed,
  createExpTopEmbed,
  createLevelTopEmbed,
  createLevelProgressEmbed,
  createExpEmbed
} from "../utils/embedBuilder.js";

import logger from "../services/logger.js";

@Discord()
@SlashGroup({ description: "Commands for managing user EXP", name: "exp" })
@SlashGroup("exp")
class ExpCommands {
  @Slash({ description: "Set user EXP to a specific value" })
  @RequireRoles(["high_mod_level", "medium_mod_level"])
  @EnsureUser()
  async set(
    @SlashOption({
      description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      name: "user",
      required: true,
      type: ApplicationCommandOptionType.User
    })
    discordUser: DiscordUser,
    @SlashOption({
      description: "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ EXP –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
      name: "exp",
      required: true,
      type: ApplicationCommandOptionType.Number
    })
    expCount: number,
    interaction: CommandInteraction,
  ) {
    try {
      const expRepository = AppDataSource.getRepository(Exp);

      const user = await AppDataSource.getRepository(User).findOneOrFail({
        where: { discordId: discordUser.id },
        relations: ["exp"]
      });

      user.exp.exp = BigInt(expCount);
      user.exp.level = getMaxLevelForExp(user.exp.exp);
      
      await expRepository.save(user.exp);
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${discordUser.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${expCount} EXP –∏ —É—Ä–æ–≤–µ–Ω—å ${user.exp.level}`);

      const embed = createSuccessEmbed(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${discordUser.id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${expCount} EXP (—É—Ä–æ–≤–µ–Ω—å ${user.exp.level})`, interaction.user);
      await interaction.reply({ embeds: [embed] });

    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ EXP: %O", error);
    }
  }

  @Slash({ description: "Add EXP to a user" })
  @RequireRoles(["high_mod_level", "medium_mod_level"])
  @EnsureUser()
  async add(
    @SlashOption({
      description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      name: "user",
      required: true,
      type: ApplicationCommandOptionType.User
    })
    discordUser: DiscordUser,
    @SlashOption({
      description: "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ EXP –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
      name: "exp",
      required: true,
      type: ApplicationCommandOptionType.Number
    })
    expCount: number,
    interaction: CommandInteraction,
  ) {
    try {
      const expRepository = AppDataSource.getRepository(Exp);

      const user = await AppDataSource.getRepository(User).findOneOrFail({
        where: { discordId: discordUser.id },
        relations: ["exp"]
      });

      const oldLevel = user.exp.level;
      await expRepository.increment({ id: user.exp.id }, "exp", expCount);
      
      const newExp = await expRepository.findOneOrFail({ where: { id: user.exp.id } });
      const newLevel = getMaxLevelForExp(newExp.exp);

      if (newLevel !== oldLevel) {
        user.exp.level = newLevel;
        await expRepository.save(user.exp);
        
        const levelUpMsg = `\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${newLevel}! üéâ`;
        const embed = createSuccessEmbed(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${discordUser.id}> –¥–æ–±–∞–≤–ª–µ–Ω–æ EXP: +${expCount}${levelUpMsg}`, interaction.user);
        await interaction.reply({ embeds: [embed] });
      } else {
        const embed = createSuccessEmbed(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${discordUser.id}> –¥–æ–±–∞–≤–ª–µ–Ω–æ EXP: +${expCount}`, interaction.user);
        await interaction.reply({ embeds: [embed] });
      }
      
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${discordUser.id} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${expCount} EXP, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel}`);

    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ EXP: %O", error);
    }
  }

  @Slash({ description: "Remove EXP from a user" })
  @RequireRoles(["high_mod_level", "medium_mod_level"])
  @EnsureUser()
  async remove(
    @SlashOption({
      description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      name: "user",
      required: true,
      type: ApplicationCommandOptionType.User
    })
    discordUser: DiscordUser,
    @SlashOption({
      description: "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ EXP –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è",
      name: "exp",
      required: true,
      type: ApplicationCommandOptionType.Number
    })
    expCount: number,
    interaction: CommandInteraction,
  ) {
    try {
      const expRepository = AppDataSource.getRepository(Exp);

      const user = await AppDataSource.getRepository(User).findOneOrFail({
        where: { discordId: discordUser.id },
        relations: ["exp"]
      });

      const oldLevel = user.exp.level;
      const currentExp = Number(user.exp.exp);
      const finalExp = Math.max(0, currentExp - expCount);
      const actualDecrease = currentExp - finalExp;
      
      user.exp.exp = BigInt(finalExp);
      const newLevel = getMaxLevelForExp(user.exp.exp);
      
      if (newLevel !== oldLevel) {
        user.exp.level = newLevel;
        await expRepository.save(user.exp);
        
        const levelDownMsg = `\n–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–Ω–∏–∑–∏–ª—Å—è –¥–æ ${newLevel}.`;
        const embed = createSuccessEmbed(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${discordUser.id}> –≤—ã—á—Ç–µ–Ω–æ EXP: -${actualDecrease}${levelDownMsg}`, interaction.user);
        await interaction.reply({ embeds: [embed] });
      } else {
        await expRepository.save(user.exp);
        const embed = createSuccessEmbed(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${discordUser.id}> –≤—ã—á—Ç–µ–Ω–æ EXP: -${actualDecrease}`, interaction.user);
        await interaction.reply({ embeds: [embed] });
      }
      
      logger.info(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${discordUser.id} –≤—ã—á—Ç–µ–Ω–æ ${actualDecrease} EXP, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel}`);

    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ EXP: %O", error);
    }
  }

  @Slash({ description: "Check user EXP and level" })
  @Guard(ChannelGuard("user_commands_channel"))
  @EnsureUser()
  async check(
    @SlashOption({
      description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –æ–ø—ã—Ç)",
      name: "user",
      required: false,
      type: ApplicationCommandOptionType.User
    })
    discordUser: DiscordUser | undefined,
    interaction: CommandInteraction,
  ) {
    try {
      const targetUser = discordUser || interaction.user;
      const user = await AppDataSource.getRepository(User).findOneOrFail({
        where: { discordId: targetUser.id },
        relations: ["exp"]
      });

      const embed = createExpEmbed(
        targetUser,
        user.exp.exp,
        user.exp.level,
        interaction.user
      );
      await interaction.reply({ embeds: [embed] });

    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø—ã—Ç–∞: %O", error);
    }
  }

  @Slash({ description: "Show top users by total EXP" })
  @Guard(ChannelGuard("user_commands_channel"))
  async top(
    @SlashOption({
      description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      name: "limit",
      required: false,
      type: ApplicationCommandOptionType.Number
    })
    limit: number = 10,
    interaction: CommandInteraction,
  ) {
    try {
      if (limit <= 0 || limit > 25) {
        limit = 10;
      }

      const expRepository = AppDataSource.getRepository(Exp);

      const topUsers = await expRepository
        .createQueryBuilder("exp")
        .leftJoinAndSelect("exp.user", "user")
        .orderBy("exp.exp", "DESC")
        .take(limit)
        .getMany();

      if (topUsers.length === 0) {
        const embed = createErrorEmbed("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—ã—Ç–æ–º!", interaction.user);
        await interaction.reply({ embeds: [embed] });
        return;
      }

      const embed = createExpTopEmbed(topUsers, limit, interaction.user, interaction.guild);
      await interaction.reply({ embeds: [embed] });
    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É: %O", error);
    }
  }

  @Slash({ description: "Show top users by level" })
  @Guard(ChannelGuard("user_commands_channel"))
  async toplevels(
    @SlashOption({
      description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      name: "limit",
      required: false,
      type: ApplicationCommandOptionType.Number
    })
    limit: number = 10,
    interaction: CommandInteraction,
  ) {
    try {
      if (limit <= 0 || limit > 25) {
        limit = 10;
      }

      const expRepository = AppDataSource.getRepository(Exp);

      const topUsers = await expRepository
        .createQueryBuilder("exp")
        .leftJoinAndSelect("exp.user", "user")
        .orderBy("exp.level", "DESC")
        .addOrderBy("exp.exp", "DESC")
        .take(limit)
        .getMany();

      if (topUsers.length === 0) {
        const embed = createErrorEmbed("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Ä–æ–≤–Ω—è–º–∏!", interaction.user);
        await interaction.reply({ embeds: [embed] });
        return;
      }

      const embed = createLevelTopEmbed(topUsers, limit, interaction.user, interaction.guild);
      await interaction.reply({ embeds: [embed] });
    } catch (error) {
      const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
      await interaction.reply({ embeds: [embed] });
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º: %O", error);
    }
  }

  @Slash({ description: "Show user level progress" })
  @Guard(ChannelGuard("user_commands_channel"))
  @EnsureUser()
  async level(
    @SlashOption({
      name: "user",
      description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è",
      type: ApplicationCommandOptionType.User,
      required: false
    })
    user: DiscordUser | undefined,
    interaction: CommandInteraction
  ) {
    try {
      await interaction.deferReply();
      const targetUser = user ? await interaction.client.users.fetch(user.id) : interaction.user;
      const userRepository = AppDataSource.getRepository(User);

      const dbUser = await userRepository.findOne({
        where: { discordId: targetUser.id },
        relations: ["exp"]
      });

      const expValue = dbUser?.exp?.exp ?? BigInt(0);
      const levelValue = dbUser?.exp?.level ?? 1;
      
      if (isMaxLevel(levelValue)) {
        const embed = createExpEmbed(
          targetUser,
          expValue,
          levelValue,
          interaction.user
        );
        embed.setDescription(`<@${targetUser.id}> –∏–º–µ–µ—Ç **${expValue}** –æ–ø—ã—Ç–∞ –∏ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`);
        
        await interaction.editReply({ embeds: [embed] });
        return;
      }
      
      const nextLevelExp = calculateNextLevelExp(levelValue);
      const daysToNext = getDaysToNextLevel(getExpToNextLevel(expValue, levelValue));
      
      const embed = createLevelProgressEmbed(
        targetUser,
        expValue,
        levelValue,
        nextLevelExp,
        interaction.user
      );
      

      await interaction.editReply({ embeds: [embed] });
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ level:", error);
      const errorEmbed = createErrorEmbed("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω–µ", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }
}

export default ExpCommands;