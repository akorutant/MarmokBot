import { Discord, Guard, Slash, SlashChoice, SlashOption } from "discordx";
import { ChannelGuard } from "../utils/decorators/ChannelGuard.js";
import { EnsureUserGuard } from "../utils/decorators/EnsureUserGuard.js";
import { ApplicationCommandOptionType, CommandInteraction } from "discord.js";
import { createTopEmbed, createErrorEmbed } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";
import { AppDataSource } from "../services/database.js";
import { Currency } from "../entities/Currency.js";
import { User } from "../entities/User.js";

@Discord()
class TopCommand {
    @Slash({ description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" })
    @Guard(
        ChannelGuard("user_commands_channel"),
        EnsureUserGuard()
    )
    async top(
        @SlashChoice("–í–∞–ª—é—Ç–∞", "currency")
        @SlashChoice("–ì–æ–ª–æ—Å–æ–≤–æ–π", "voice")
        @SlashOption({
            description: "–¢–∏–ø —Ç–æ–ø–∞",
            name: "type",
            required: true,
            type: ApplicationCommandOptionType.String
        })
        topType: string,
        @SlashOption({
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            name: "limit",
            required: false,
            type: ApplicationCommandOptionType.Number
        })
        limit: number = 10,
        interaction: CommandInteraction,
    ) {
        try {
            if (limit <= 0 || limit > 25) limit = 10;
    
            if (topType === "voice") {
                const userRepository = AppDataSource.getRepository(User);
                const topUsers = await userRepository
                    .createQueryBuilder("user")
                    .orderBy("user.voiceMinutes", "DESC")
                    .take(limit)
                    .getMany();
    
                if (topUsers.length === 0) {
                    const embed = createErrorEmbed("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!", interaction.user);
                    return interaction.reply({ embeds: [embed] });
                }
    
                const embed = createTopEmbed(
                    topUsers.map((u) => ({ user: u, value: u.voiceMinutes })),
                    limit,
                    interaction.user,
                    interaction.guild,
                    {
                        title: `üéôÔ∏è –¢–æ–ø ${limit} –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                        description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ—Ö —Å–∏–¥–µ–ª–∏ –≤ –≥–æ–ª–æ—Å–µ",
                        icon: "üïê",
                        color: EmbedColors.INFO
                    }
                );
    
                return interaction.reply({ embeds: [embed] });
            }
    
            const currencyRepository = AppDataSource.getRepository(Currency);
            const topUsers = await currencyRepository
                .createQueryBuilder("currency")
                .leftJoinAndSelect("currency.user", "user")
                .orderBy("currency.currencyCount", "DESC")
                .take(limit)
                .getMany();
    
            if (topUsers.length === 0) {
                const embed = createErrorEmbed("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞–ª—é—Ç–æ–π!", interaction.user);
                return interaction.reply({ embeds: [embed] });
            }
    
            const embed = createTopEmbed(
                topUsers.map((c) => ({ user: c.user, value: c.currencyCount })),
                limit,
                interaction.user,
                interaction.guild,
                {
                    title: `üí∞ –¢–æ–ø ${limit} –ø–æ –≤–∞–ª—é—Ç–µ`,
                    description: "–°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                    icon: "üí∞",
                    color: EmbedColors.CURRENCY
                }
            );
    
            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            const embed = createErrorEmbed("–û—à–∏–±–∫–∞! –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", interaction.user);
            await interaction.reply({ embeds: [embed] });
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %O", error);
        }
    }
    
}

export default TopCommand;