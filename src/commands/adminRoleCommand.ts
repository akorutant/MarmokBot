import { Discord, Slash, SlashOption, SlashGroup, Guard } from "discordx";
import { 
  CommandInteraction, 
  ApplicationCommandOptionType, 
  EmbedBuilder, 
  Colors,
  User as DiscordUser,
  PermissionFlagsBits
} from "discord.js";
import { AppDataSource } from "../services/database.js";
import { User as DBUser } from "../entities/User.js";
import { ShopConfig, ShopItemType } from "../entities/ShopConfig.js";
import { Inventory } from "../entities/Inventory.js";
import { RoleMaintenanceScheduler } from "../events/RoleMaintenanceSheduler.js";
import { RoleShopService } from "../services/RoleShopService.js";
import { RequireRoles } from "../utils/decorators/RequireRoles.js";
import { EnsureUserGuard } from "../utils/decorators/EnsureUserGuard.js";
import { createErrorEmbed } from "../utils/embedBuilder.js";
import logger from "../services/logger.js";

@Discord()
@SlashGroup({
  description: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π",
  name: "roleadmin",
  dmPermission: false,
  defaultMemberPermissions: [PermissionFlagsBits.Administrator]
})
@SlashGroup("roleadmin")
class AdminRoleCommands {
  private roleShopService = RoleShopService.getInstance();

  @Slash({
    name: "config",
    description: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π"
  })
  @Guard(
    RequireRoles(["admin", "moderator"]),
    EnsureUserGuard()
  )
  async configureShop(
    @SlashOption({
      name: "item",
      description: "–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
      type: ApplicationCommandOptionType.String,
      required: true,
      choices: [
        { name: "–°–ª–æ—Ç —Ä–æ–ª–∏", value: "role_slot" },
        { name: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ–ª–∏", value: "role_maintenance" }
      ]
    })
    itemType: string,
    @SlashOption({
      name: "price",
      description: "–¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞",
      type: ApplicationCommandOptionType.Integer,
      required: false,
      minValue: 1
    })
    price?: number,
    @SlashOption({
      name: "maintenance_days",
      description: "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –¥–Ω—è—Ö",
      type: ApplicationCommandOptionType.Integer,
      required: false,
      minValue: 1,
      maxValue: 30
    })
    maintenanceDays?: number,
    @SlashOption({
      name: "max_sharing",
      description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏–π",
      type: ApplicationCommandOptionType.Integer,
      required: false,
      minValue: 1,
      maxValue: 10
    })
    maxSharing?: number,
    @SlashOption({
      name: "refund_rate",
      description: "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Å–ª–æ—Ç–∞ (0.1-1.0)",
      type: ApplicationCommandOptionType.Number,
      required: false,
      minValue: 0.1,
      maxValue: 1.0
    })
    refundRate?: number,
    @SlashOption({
      name: "enabled",
      description: "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω",
      type: ApplicationCommandOptionType.Boolean,
      required: false
    })
    enabled?: boolean,
    interaction: CommandInteraction
  ) {
    try {
      await interaction.deferReply();

      const shopItemType = itemType as ShopItemType;
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      let config = await AppDataSource.getRepository(ShopConfig).findOne({
        where: { itemType: shopItemType }
      });

      if (!config) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AppDataSource.getRepository(ShopConfig).create({
          itemType: shopItemType,
          price: BigInt(price || 1000),
          maintenanceDays: maintenanceDays || 14,
          maxSharingSlots: maxSharing || 2,
          slotRefundRate: refundRate || 0.5,
          isEnabled: enabled !== undefined ? enabled : true
        });
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (price !== undefined) config.price = BigInt(price);
        if (maintenanceDays !== undefined) config.maintenanceDays = maintenanceDays;
        if (maxSharing !== undefined) config.maxSharingSlots = maxSharing;
        if (refundRate !== undefined) config.slotRefundRate = refundRate;
        if (enabled !== undefined) config.isEnabled = enabled;
      }

      await AppDataSource.getRepository(ShopConfig).save(config);

      const embed = new EmbedBuilder()
        .setTitle("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        .setDescription(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è **${itemType}** —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`)
        .addFields(
          { name: "–¶–µ–Ω–∞", value: `${config.price}$`, inline: true },
          { name: "–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", value: `${config.maintenanceDays} –¥–Ω–µ–π`, inline: true },
          { name: "–ú–∞–∫—Å. —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏–π", value: `${config.maxSharingSlots}`, inline: true },
          { name: "–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", value: `${Math.floor(config.slotRefundRate * 100)}%`, inline: true },
          { name: "–°—Ç–∞—Ç—É—Å", value: config.isEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ", inline: true }
        )
        .setColor(Colors.Green)
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      logger.info(`Shop config updated by ${interaction.user.id}: ${itemType}`);

    } catch (error) {
      logger.error("Error in configureShop command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "stats",
    description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π"
  })
  @Guard(
    RequireRoles(["admin", "moderator"]),
    EnsureUserGuard()
  )
  async shopStats(interaction: CommandInteraction) {
    try {
      await interaction.deferReply();

      const scheduler = RoleMaintenanceScheduler.getInstance(interaction.client);
      const stats = await scheduler.getRoleStats();
      const config = await this.roleShopService.getShopConfig();

      const embed = new EmbedBuilder()
        .setTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π")
        .addFields(
          { name: "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏", value: stats.activeRoles.toString(), inline: true },
          { name: "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ", value: stats.suspendedRoles.toString(), inline: true },
          { name: "üîÑ –ù–∞ –∞—É–∫—Ü–∏–æ–Ω–µ", value: stats.auctionRoles.toString(), inline: true },
          { name: "üí∏ –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã", value: stats.soldSlots.toString(), inline: true },
          { name: "ü§ù –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏—è", value: stats.totalShares.toString(), inline: true },
          { name: "‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏", value: stats.upcomingPayments.toString(), inline: true }
        )
        .addFields(
          { name: "üí∞ –¶–µ–Ω–∞ —Å–ª–æ—Ç–∞", value: `${config.roleSlotPrice || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}$`, inline: true },
          { name: "üîÑ –¶–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", value: `${config.maintenancePrice || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}$`, inline: true },
          { name: "üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", value: `${config.maintenanceDays || 14} –¥–Ω–µ–π`, inline: true }
        )
        .setColor(Colors.Blue)
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

    } catch (error) {
      logger.error("Error in shopStats command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "force-sync",
    description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å Discord"
  })
  @Guard(
    RequireRoles(["admin"]),
    EnsureUserGuard()
  )
  async forceSync(interaction: CommandInteraction) {
    try {
      await interaction.deferReply();

      const embed = new EmbedBuilder()
        .setTitle("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        .setDescription("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π...")
        .setColor(Colors.Yellow)
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      const scheduler = RoleMaintenanceScheduler.getInstance(interaction.client);
      const result = await scheduler.forceSyncAllRoles();

      const resultEmbed = new EmbedBuilder()
        .setTitle("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        .addFields(
          { name: "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–æ–ª–µ–π", value: result.rolesProcessed.toString(), inline: true },
          { name: "–°–æ–∑–¥–∞–Ω–æ —Ä–æ–ª–µ–π", value: result.rolesCreated.toString(), inline: true },
          { name: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤", value: result.rolesSynced.toString(), inline: true },
          { name: "–û—à–∏–±–æ–∫", value: result.errors.toString(), inline: true }
        )
        .setColor(result.errors > 0 ? Colors.Orange : Colors.Green)
        .setTimestamp();

      await interaction.editReply({ embeds: [resultEmbed] });

      logger.info(`Force sync completed by ${interaction.user.id}:`, result);

    } catch (error) {
      logger.error("Error in forceSync command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–π", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "user-roles",
    description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  })
  @Guard(
    RequireRoles(["admin", "moderator"]),
    EnsureUserGuard()
  )
  async userRoles(
    @SlashOption({
      name: "user",
      description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
      type: ApplicationCommandOptionType.User,
      required: true
    })
    targetUser: DiscordUser,
    interaction: CommandInteraction
  ) {
    try {
      await interaction.deferReply();

      const dbUser = await AppDataSource.getRepository(DBUser).findOne({
        where: { discordId: targetUser.id }
      });

      if (!dbUser) {
        const errorEmbed = createErrorEmbed("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", interaction.user);
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      const { ownedRoles, sharedRoles } = await this.roleShopService.getUserRoles(dbUser.id);

      const embed = new EmbedBuilder()
        .setTitle(`üé≠ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.displayName}`)
        .setThumbnail(targetUser.displayAvatarURL())
        .setColor(Colors.Blue)
        .setTimestamp();

      let description = "";

      if (ownedRoles.length > 0) {
        description += "**üëë –í–ª–∞–¥–µ–µ—Ç —Ä–æ–ª—è–º–∏:**\n";
        for (const role of ownedRoles) {
          const roleName = role.itemData?.roleName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å";
          const status = this.getStatusText(role.status);
          const nextPayment = role.nextMaintenanceDate ? 
            `<t:${Math.floor(role.nextMaintenanceDate.getTime() / 1000)}:R>` : 
            "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è";
          
          description += `‚Ä¢ **${roleName}** - ${status}\n  üí∞ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${nextPayment}\n`;
        }
        description += "\n";
      }

      if (sharedRoles.length > 0) {
        description += "**ü§ù –†–∞—Å—à–∞—Ä–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**\n";
        for (const share of sharedRoles) {
          const roleName = share.inventory.itemData?.roleName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å";
          description += `‚Ä¢ **${roleName}** (–æ—Ç <@${share.ownerId}>)\n`;
        }
      }

      if (description === "") {
        description = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π";
      }

      embed.setDescription(description);
      await interaction.editReply({ embeds: [embed] });

    } catch (error) {
      logger.error("Error in userRoles command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "force-payment",
    description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  })
  @Guard(
    RequireRoles(["admin"]),
    EnsureUserGuard()
  )
  async forcePayment(
    @SlashOption({
      name: "user",
      description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      type: ApplicationCommandOptionType.User,
      required: true
    })
    targetUser: DiscordUser,
    @SlashOption({
      name: "role",
      description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏",
      type: ApplicationCommandOptionType.String,
      required: true
    })
    roleName: string,
    @SlashOption({
      name: "days",
      description: "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å",
      type: ApplicationCommandOptionType.Integer,
      required: false,
      minValue: 1,
      maxValue: 365
    })
    days: number = 14,
    interaction: CommandInteraction
  ) {
    try {
      await interaction.deferReply();

      const dbUser = await AppDataSource.getRepository(DBUser).findOne({
        where: { discordId: targetUser.id }
      });

      if (!dbUser) {
        const errorEmbed = createErrorEmbed("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", interaction.user);
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      const { ownedRoles } = await this.roleShopService.getUserRoles(dbUser.id);
      const role = ownedRoles.find(r => 
        r.itemData?.roleName?.toLowerCase() === roleName.toLowerCase()
      );

      if (!role) {
        const errorEmbed = createErrorEmbed(`–†–æ–ª—å "${roleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, interaction.user);
        await interaction.editReply({ embeds: [errorEmbed] });
        return;
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —Ä–æ–ª—å
      const newPaymentDate = new Date(Date.now() + days * 24 * 60 * 60 * 1000);
      
      await AppDataSource.getRepository(Inventory).update(
        { id: role.id },
        { 
          nextMaintenanceDate: newPaymentDate,
          status: role.status === "suspended" ? "active" : role.status
        }
      );

      const embed = new EmbedBuilder()
        .setTitle("‚úÖ –†–æ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞")
        .addFields(
          { name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value: `<@${targetUser.id}>`, inline: true },
          { name: "–†–æ–ª—å", value: roleName, inline: true },
          { name: "–ü—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞", value: `${days} –¥–Ω–µ–π`, inline: true },
          { name: "–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞", value: `<t:${Math.floor(newPaymentDate.getTime() / 1000)}:R>`, inline: false }
        )
        .setColor(Colors.Green)
        .setTimestamp()
        .setFooter({ text: `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.displayName}` });

      await interaction.editReply({ embeds: [embed] });

      logger.info(`Role ${role.id} force extended by admin ${interaction.user.id} for user ${targetUser.id}`);

    } catch (error) {
      logger.error("Error in forcePayment command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "cleanup-history",
    description: "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"
  })
  @Guard(
    RequireRoles(["admin"]),
    EnsureUserGuard()
  )
  async cleanupHistory(interaction: CommandInteraction) {
    try {
      await interaction.deferReply();

      const scheduler = RoleMaintenanceScheduler.getInstance(interaction.client);
      const deletedRows = await scheduler.cleanupOldHistory();

      const embed = new EmbedBuilder()
        .setTitle("üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        .setDescription(`–£–¥–∞–ª–µ–Ω–æ **${deletedRows}** —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)`)
        .setColor(Colors.Green)
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      logger.info(`History cleanup completed by ${interaction.user.id}: ${deletedRows} rows deleted`);

    } catch (error) {
      logger.error("Error in cleanupHistory command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  @Slash({
    name: "health",
    description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"
  })
  @Guard(
    RequireRoles(["admin"]),
    EnsureUserGuard()
  )
  async healthCheck(interaction: CommandInteraction) {
    try {
      await interaction.deferReply();

      const scheduler = RoleMaintenanceScheduler.getInstance(interaction.client);
      const health = await scheduler.healthCheck();

      const embed = new EmbedBuilder()
        .setTitle(`${health.isHealthy ? "‚úÖ" : "‚ùå"} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π`)
        .setColor(health.isHealthy ? Colors.Green : Colors.Red)
        .setTimestamp();

      let description = "**–ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:**\n";
      for (const [check, status] of Object.entries(health.checks)) {
        description += `${status ? "‚úÖ" : "‚ùå"} ${this.getCheckName(check)}\n`;
      }

      if (health.lastRun) {
        description += `\n**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** <t:${Math.floor(health.lastRun.getTime() / 1000)}:R>`;
      }

      embed.setDescription(description);
      await interaction.editReply({ embeds: [embed] });

    } catch (error) {
      logger.error("Error in healthCheck command:", error);
      const errorEmbed = createErrorEmbed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã", interaction.user);
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getStatusText(status: string): string {
    switch (status) {
      case "active": return "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞";
      case "suspended": return "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
      case "expired": return "‚ùå –ò—Å—Ç–µ–∫–ª–∞";
      case "transferring": return "üîÑ –ù–∞ –∞—É–∫—Ü–∏–æ–Ω–µ";
      case "sold": return "üí∏ –°–ª–æ—Ç –ø—Ä–æ–¥–∞–Ω";
      default: return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  }

  private getCheckName(check: string): string {
    switch (check) {
      case "database": return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö";
      case "discord": return "Discord –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ";
      case "inventoryTable": return "–¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è";
      case "scheduler": return "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫";
      default: return check;
    }
  }
}

export default AdminRoleCommands;