import { AppDataSource } from '../../services/database.js';
import { User } from '../../entities/User.js';
import { GiftStats } from '../../entities/GiftStats.js';
import { Currency } from '../../entities/Currency.js';
import { TextChannel, EmbedBuilder, Client } from 'discord.js';
import logger from '../../services/logger.js';
import { RARITY_COLORS } from '../../constants/colors.js';
import { pluralizeGifts } from '../giftUtils.js';
import { Config } from '../../entities/Config.js';

const MINUTES_PER_GIFT = 480; 

let discordClient: Client | undefined;

export function setDiscordClient(client: Client) {
  discordClient = client;
  logger.info('Discord client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∞—Ä–∫–æ–≤');
}

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
 * @param discordId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
 * @param forceCheck –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≤–æ–π—Å–∞)
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö –∏–ª–∏ null
 */
export async function checkAndProcessGifts(discordId: string, forceCheck: boolean = false): Promise<{
  newGifts: number;
  totalAvailable: number;
} | null> {
  try {
    const userRepo = AppDataSource.getRepository(User);
    const giftRepo = AppDataSource.getRepository(GiftStats);

    const user = await userRepo.findOne({ 
      where: { discordId },
      relations: ["exp", "currency", "giftStats"]
    });
    
    if (!user) {
      logger.warn(`checkAndProcessGifts: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID ${discordId}`);
      return null;
    }

    let giftStats = await giftRepo.findOne({ where: { discordId } });
    if (!giftStats) {
      giftStats = giftRepo.create({
        discordId,
        userId: user.id,
        user,
        trackedVoiceMinutes: user.voiceMinutes, 
        claimedGiftsFromVoice: 0,
        totalGiftsClaimed: 0,
        availableGifts: 0,
        lastDailyGiftClaim: null
      });
      
      logger.debug(`checkAndProcessGifts: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å GiftStats –¥–ª—è ${discordId}`);
    } else if (forceCheck) {
      if (user.voiceMinutes > giftStats.trackedVoiceMinutes) {
        logger.info(`checkAndProcessGifts: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è ${discordId}. user.voiceMinutes=${user.voiceMinutes}, giftStats.trackedVoiceMinutes=${giftStats.trackedVoiceMinutes}`);
        giftStats.trackedVoiceMinutes = user.voiceMinutes;
      }
    }

    const minutes = Number(user.voiceMinutes);
    const potentialGifts = Math.floor(minutes / MINUTES_PER_GIFT);
    
    const newGifts = potentialGifts - giftStats.claimedGiftsFromVoice;
    
    if (newGifts <= 0 && !forceCheck) {
      return null; 
    }
    
    if (newGifts > 0) {
      giftStats.claimedGiftsFromVoice += newGifts;
      giftStats.availableGifts += newGifts;
      
      logger.info(`checkAndProcessGifts: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordId} –ø–æ–ª—É—á–∏–ª ${newGifts} –ø–æ–¥–∞—Ä–∫–æ–≤. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${giftStats.availableGifts}`);
      
      await giftRepo.save(giftStats);
      
      return {
        newGifts,
        totalAvailable: Number(giftStats.availableGifts)
      };
    } else if (forceCheck) {
      await giftRepo.save(giftStats);
      logger.debug(`checkAndProcessGifts: –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${discordId} –±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤`);
    }
    
    return null;
  } catch (error) {
    logger.error(`checkAndProcessGifts error: ${error}`);
    return null;
  }
}

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
 */
export function CheckGiftProgress() {
  return function (
    target: any,
    propertyKey: string,
    descriptor: PropertyDescriptor
  ) {
    const originalMethod = descriptor.value;
    descriptor.value = async function (...args: any[]) {
      await originalMethod.apply(this, args);

      try {
        let discordId: string | undefined;
        const firstArg = args[0];
        if (typeof firstArg === 'string') {
          discordId = firstArg;
        } else if (firstArg?.author?.id) {
          discordId = firstArg.author.id;
        } else if (Array.isArray(firstArg) && (firstArg[1]?.member?.id || firstArg[0]?.member?.id)) {
          discordId = firstArg[1]?.member?.id || firstArg[0]?.member?.id;
        } else if (args.find(arg => arg?.user?.id)) {
          const interaction = args.find(arg => arg?.user?.id);
          discordId = interaction.user.id;
        }
        
        if (!discordId) return;
        
        const giftResult = await checkAndProcessGifts(discordId);
        
        if (giftResult && giftResult.newGifts > 0) {
          await sendGiftNotification(discordId, giftResult.newGifts, giftResult.totalAvailable);
        }
      } catch (error) {
        logger.error(`CheckGiftProgress decorator error: ${error}`);
      }
    };
    return descriptor;
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –∏–ª–∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export async function sendGiftNotification(
  discordId: string,
  giftCount: number,
  totalAvailable: number
) {
    if (!discordClient?.isReady()) { 
        logger.error('Discord client not initialized or not ready for gift notifications');
        return;
    }

  const embed = new EmbedBuilder()
    .setColor(RARITY_COLORS.epic)
    .setTitle(`üéÅ –í—ã –ø–æ–ª—É—á–∏–∏–ª–∏ ${giftCount} ${pluralizeGifts(giftCount)}!`)
    .setDescription(
      `–ó–∞ ${(giftCount * 8)} —á–∞—Å–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ${giftCount} ${pluralizeGifts(giftCount)}.` +
      `\n\n–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å ${totalAvailable} ${pluralizeGifts(totalAvailable)} –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.`
    )
    .addFields({
      name: 'üí° –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–∫–∏',
      value: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/opengift`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!',
    })
    .setTimestamp()
    .setFooter({ text: '–ü–æ–¥–∞—Ä–∫–∏ –≤—ã–¥–∞—é—Ç—Å—è –∑–∞ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ' });

  try {
    const user = await discordClient.users.fetch(discordId);
    await user.send({ embeds: [embed] });
    logger.info(`Sent gift notification to ${user.tag} in DM`);
    return;  
  } catch (dmError) {
    logger.warn(`Cannot send gift DM to ${discordId}, trying fallback channel: ${dmError}`);
  }

  try {
    const configRepo = AppDataSource.getRepository(Config);
    const config = await configRepo.findOneBy({ key: 'user_command_channel' });

    if (!config) {
      logger.error("Fallback channel ID not found in config");
      return;
    }

    const channelId = config.value;
    const channel = await discordClient.channels.fetch(channelId) as TextChannel;

    if (!channel || !channel.isTextBased()) {
      logger.error(`Fallback channel ${channelId} is invalid`);
      return;
    }

    const publicEmbed = new EmbedBuilder()
      .setColor(RARITY_COLORS.epic)
      .setTitle(`üéÅ <@${discordId}> –ø–æ–ª—É—á–∏–ª ${giftCount} ${pluralizeGifts(giftCount)}!`)
      .setDescription(`–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${totalAvailable} ${pluralizeGifts(totalAvailable)} –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è!`)
      .addFields({
        name: 'üí° –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–∫–∏',
        value: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/opengift`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!',
      })
      .setTimestamp();

    await channel.send({ embeds: [publicEmbed] });
    logger.info(`Sent gift notification for ${discordId} in fallback channel`);
  } catch (fallbackError) {
    logger.error(`sendGiftNotification fallback error for ${discordId}: ${fallbackError}`);
  }
}