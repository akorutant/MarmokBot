import { AppDataSource } from "../../services/database.js";
import { User } from "../../entities/User.js";
import { Exp } from "../../entities/Exp.js";
import { Currency } from "../../entities/Currency.js";
import { TextChannel, EmbedBuilder, Client, GuildMember } from "discord.js";
import logger from "../../services/logger.js";
import { calculateNextLevelExp, getMaxLevelForExp } from "../levelUpUtils.js";
import { RARITY_COLORS } from "../../constants/colors.js";

let discordClient: Client | undefined = undefined;

export function setDiscordClient(client: Client) {
  discordClient = client;
}

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
 * –¢–∞–∫–∂–µ –≤—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã, —Ä–∞–≤–Ω–æ–µ —É—Ä–æ–≤–Ω—é*100.
 */
export function CheckLevelUp() {
    return function (
      target: any,
      propertyKey: string,
      descriptor: PropertyDescriptor
    ) {
      const originalMethod = descriptor.value;
  
      descriptor.value = async function (...args: any[]) {
        await originalMethod.apply(this, args);
  
        try {
          let discordId: string | undefined;
          const firstArg = args[0];
  
          if (typeof firstArg === 'string') {
            discordId = firstArg;
          } else if (firstArg?.author?.id) {
            discordId = firstArg.author.id;
          } else if (firstArg?.[0]?.member?.id || firstArg?.[1]?.member?.id) {
            discordId = (firstArg[1]?.member?.id || firstArg[0]?.member?.id);
          } else if (args.find(arg => arg?.user?.id)) {
            const interaction = args.find(arg => arg?.user?.id);
            discordId = interaction.user.id;
          }
  
          if (!discordId) {
            return;
          }
  
          const userRepository = AppDataSource.getRepository(User);
          const user = await userRepository.findOne({
            where: { discordId },
            relations: ["exp", "currency"],
          });
  
          if (!user || !user.exp) {
            logger.warn(`CheckLevelUp: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ exp –¥–ª—è ${discordId}`);
            return;
          }
  
          const currentExp = Number(user.exp.exp);
          const oldLevel = user.exp.level;
  
          const newLevel = getMaxLevelForExp(BigInt(currentExp));
  
          if (newLevel > oldLevel) {
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordId} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å ${oldLevel} –¥–æ ${newLevel}`);
  
            const expRepository = AppDataSource.getRepository(Exp);
            await expRepository.update(
              { id: user.exp.id },
              { level: newLevel }
            );
  
            const currencyRepository = AppDataSource.getRepository(Currency);
            const levelReward = newLevel * 100;
            
            await currencyRepository.increment(
              { id: user.currency.id },
              "currencyCount",
              levelReward
            );
            
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordId} –ø–æ–ª—É—á–∏–ª ${levelReward}$ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è ${newLevel}`);
  
            await sendLevelUpMessage(discordId, newLevel, levelReward);
          }
        } catch (error) {
          logger.error(`CheckLevelUp: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ä–æ–≤–Ω—è: ${error}`);
        }
      };
  
      return descriptor;
    };
  }

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ —á–∞—Ç
 */
async function sendLevelUpMessage(
    discordId: string,
    newLevel: number,
    reward: number
  ) {
    try {
      if (!discordClient) {
        logger.error("Discord Client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è");
        return;
      }
  
      const user = await discordClient.users.fetch(discordId);
      if (!user) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord ${discordId}`);
        return;
      }
  
      const embed = new EmbedBuilder()
        .setColor(RARITY_COLORS.legendary)
        .setTitle(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!`)
        .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **${newLevel}** —É—Ä–æ–≤–Ω—è!`)
        .addFields(
          { name: 'üí∞ –ù–∞–≥—Ä–∞–¥–∞', value: `${reward}$`, inline: true },
        )
        .setTimestamp()
        .setFooter({ text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!` });
  
      try {
        await user.send({ embeds: [embed] });
        logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ –õ–° –¥–ª—è ${user.tag}`);
        return;
      } catch (dmError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° ${user.tag}, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ user_command_channel: ${dmError}`);
      }
  
      const configRepo = AppDataSource.getRepository('config');
      const config = await configRepo.findOneBy({ key: 'user_command_channel' });
      if (!config) {
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å user_command_channel –≤ —Ç–∞–±–ª–∏—Ü–µ config");
        return;
      }
  
      const channelId = config.value;
      const channel = await discordClient.channels.fetch(channelId) as TextChannel;
  
      if (!channel || !channel.isTextBased()) {
        logger.error(`–ö–∞–Ω–∞–ª —Å id ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º`);
        return;
      }
  
      const publicEmbed = new EmbedBuilder()
        .setColor(RARITY_COLORS.legendary)
        .setTitle(`‚ú® –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! ‚ú®`)
        .setDescription(`<@${discordId}> –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ **${newLevel}**!`)
        .addFields(
          { name: 'üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å', value: `${reward}$`, inline: true },
        )
        .setTimestamp()
        .setThumbnail(user.displayAvatarURL({ size: 256 }));
  
      await channel.send({ embeds: [publicEmbed] });
      logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ –∫–∞–Ω–∞–ª ${channel.name} –¥–ª—è ${user.tag}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: ${error}`);
    }
  }
  