import { AppDataSource } from "../../services/database.js";
import { User } from "../../entities/User.js";
import { Exp } from "../../entities/Exp.js";
import { Currency } from "../../entities/Currency.js";
import { TextChannel, EmbedBuilder, Client, GuildMember } from "discord.js";
import logger from "../../services/logger.js";
import { calculateNextLevelExp, getMaxLevelForExp } from "../levelUpUtils.js";
import { RARITY_COLORS } from "../../constants/colors.js";

let discordClient: Client | undefined = undefined;

export function setDiscordClient(client: Client) {
  discordClient = client;
}

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
 * –¢–∞–∫–∂–µ –≤—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã, —Ä–∞–≤–Ω–æ–µ —É—Ä–æ–≤–Ω—é*100.
 */
export function CheckLevelUp() {
  return function (
    target: any,
    propertyKey: string,
    descriptor: PropertyDescriptor
  ) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      await originalMethod.apply(this, args);

      try {
        let discordId: string | undefined;
        const firstArg = args[0];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if (typeof firstArg === 'string') {
          discordId = firstArg;
        } else if (firstArg?.author?.id) {
          discordId = firstArg.author.id;
        } else if (firstArg?.[0]?.member?.id || firstArg?.[1]?.member?.id) {
          discordId = (firstArg[1]?.member?.id || firstArg[0]?.member?.id);
        } else if (args.find(arg => arg?.user?.id)) {
          const interaction = args.find(arg => arg?.user?.id);
          discordId = interaction.user.id;
        }

        if (!discordId) {
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—ã—Å–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
        const userRepository = AppDataSource.getRepository(User);
        const user = await userRepository.findOne({
          where: { discordId },
          relations: ["exp", "currency"],
        });

        if (!user || !user.exp) {
          logger.warn(`CheckLevelUp: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ exp –¥–ª—è ${discordId}`);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ exp
        const currentExp = Number(user.exp.exp);
        const oldLevel = user.exp.level;

        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ exp
        const newLevel = getMaxLevelForExp(BigInt(currentExp));

        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
        if (newLevel > oldLevel) {
          logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordId} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å ${oldLevel} –¥–æ ${newLevel}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const expRepository = AppDataSource.getRepository(Exp);
          await expRepository.update(
            { id: user.exp.id },
            { level: newLevel }
          );

          // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è - 100 –≤–∞–ª—é—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
          const currencyRepository = AppDataSource.getRepository(Currency);
          const levelReward = newLevel * 100;
          
          await currencyRepository.increment(
            { id: user.currency.id },
            "currencyCount",
            levelReward
          );
          
          logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordId} –ø–æ–ª—É—á–∏–ª ${levelReward}$ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è ${newLevel}`);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
          await sendLevelUpMessage(discordId, newLevel, levelReward);
        }
      } catch (error) {
        logger.error(`CheckLevelUp: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ä–æ–≤–Ω—è: ${error}`);
      }
    };

    return descriptor;
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ —á–∞—Ç
 */
async function sendLevelUpMessage(
  discordId: string,
  newLevel: number,
  reward: number
) {
  try {
    if (!discordClient) {
      logger.error("Discord Client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
    const user = await discordClient.users.fetch(discordId);
    if (!user) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord ${discordId}`);
      return;
    }

    const guild = discordClient.guilds.cache.first();
    if (!guild) {
      logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏–ª—å–¥–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è");
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const channel = guild.channels.cache.find(
      ch => ch.name === "level-ups" || ch.name === "—É—Ä–æ–≤–Ω–∏"
    ) as TextChannel;

    if (!channel) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–∞–Ω–∞–ª
      const generalChannel = guild.channels.cache.find(
        ch => ch.name === "general" || ch.name === "main" || ch.name === "–æ–±—â–∏–π"
      ) as TextChannel;

      if (!generalChannel) {
        logger.warn("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞
        try {
          const dm = await user.createDM();
          
          const dmEmbed = new EmbedBuilder()
            .setColor(RARITY_COLORS.legendary)
            .setTitle(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!`)
            .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **${newLevel}** —É—Ä–æ–≤–Ω—è!`)
            .addFields(
              { name: 'üí∞ –ù–∞–≥—Ä–∞–¥–∞', value: `${reward}$`, inline: true },
            )
            .setTimestamp()
            .setFooter({ text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!` });
            
          await dm.send({ embeds: [dmEmbed] });
          logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ –õ–° –¥–ª—è ${user.tag}`);
        } catch (dmError) {
          logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: ${dmError}`);
        }
        
        return;
      }
      
      const embed = new EmbedBuilder()
        .setColor(RARITY_COLORS.legendary)
        .setTitle(`üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!`)
        .setDescription(`<@${discordId}> –¥–æ—Å—Ç–∏–≥ **${newLevel}** —É—Ä–æ–≤–Ω—è!`)
        .addFields(
          { name: 'üí∞ –ù–∞–≥—Ä–∞–¥–∞', value: `${reward}$`, inline: true },
        )
        .setTimestamp();

      await generalChannel.send({ embeds: [embed] });
      logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è ${user.tag}`);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    const embed = new EmbedBuilder()
      .setColor(RARITY_COLORS.legendary)
      .setTitle(`‚ú® –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! ‚ú®`)
      .setDescription(`<@${discordId}> –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ **${newLevel}**!`)
      .addFields(
        { name: 'üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å', value: `${reward}$`, inline: true },
      )
      .setTimestamp()
      .setThumbnail(user.displayAvatarURL({ size: 256 }));

    await channel.send({ embeds: [embed] });
    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤ –∫–∞–Ω–∞–ª ${channel.name} –¥–ª—è ${user.tag}`);

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: ${error}`);
  }
}