import { EmbedBuilder, User, Guild, ColorResolvable, CommandInteraction } from "discord.js";
import { calculateNextLevelExp } from "./levelUpUtils.js";
import { getHoursString } from "./hoursUtils.js";
import { GiftReward } from "../types/giftTypes.js";
import { CasinoResult } from "../types/casinoTypes.js";
import { RARITY_COLORS } from "../constants/colors.js";
import { pluralizeGifts } from "./giftUtils.js";

export enum EmbedColors {
  DEFAULT = 0x5865F2,
  SUCCESS = 0x57F287,
  WARNING = 0xFEE75C,
  ERROR = 0xED4245,
  INFO = 0x5DADE2,
  CURRENCY = 0xF1C40F,
  EXP = 0x9B59B6,
  GAME = 0xFCE83B
}

interface EmbedOptions {
  title?: string;
  description?: string;
  color?: ColorResolvable;
  timestamp?: boolean;
  thumbnail?: string;
  footer?: {
    text: string;
    iconURL?: string;
  };
  author?: {
    name: string;
    iconURL?: string;
    url?: string;
  };
  fields?: Array<{
    name: string;
    value: string;
    inline?: boolean;
  }>;
}

export function createEmbed(options: EmbedOptions): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setColor(options.color || EmbedColors.DEFAULT);

  if (options.title) embed.setTitle(options.title);
  if (options.description) embed.setDescription(options.description);
  if (options.timestamp) embed.setTimestamp();
  if (options.thumbnail) embed.setThumbnail(options.thumbnail);

  if (options.footer) {
    embed.setFooter({
      text: options.footer.text,
      iconURL: options.footer.iconURL
    });
  }

  if (options.author) {
    embed.setAuthor({
      name: options.author.name,
      iconURL: options.author.iconURL,
      url: options.author.url
    });
  }

  if (options.fields && options.fields.length > 0) {
    embed.addFields(options.fields);
  }

  return embed;
}

export function createErrorEmbed(message: string, user?: User): EmbedBuilder {
  return createEmbed({
    title: '‚ùå –û—à–∏–±–∫–∞',
    description: message,
    color: EmbedColors.ERROR,
    timestamp: true,
    footer: user ? {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${user.username}`,
      iconURL: user.displayAvatarURL()
    } : undefined
  });
}

export function createSuccessEmbed(message: string, user?: User): EmbedBuilder {
  return createEmbed({
    title: '‚úÖ –£—Å–ø–µ—à–Ω–æ',
    description: message,
    color: EmbedColors.SUCCESS,
    timestamp: true,
    footer: user ? {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${user.username}`,
      iconURL: user.displayAvatarURL()
    } : undefined
  });
}

export function createCurrencyTopEmbed(
  topUsers: Array<{ user: { discordId: string }, currencyCount: bigint }>,
  limit: number,
  requestUser: User,
  guild?: Guild | null
): EmbedBuilder {
  const medals = ['ü•á', 'ü•à', 'ü•â'];

  let topList = '';
  for (let i = 0; i < topUsers.length; i++) {
    const user = topUsers[i];
    const prefix = i < 3 ? medals[i] : `${i + 1}.`;
    topList += `${prefix} <@${user.user.discordId}> ‚Äî **${user.currencyCount}** üí∞\n`;
  }

  return createEmbed({
    title: `üèÜ –¢–æ–ø ${limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞–ª—é—Ç–µ`,
    description: '–°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞',
    color: EmbedColors.CURRENCY,
    timestamp: true,
    thumbnail: guild?.iconURL() || undefined,
    footer: {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${requestUser.username}`,
      iconURL: requestUser.displayAvatarURL()
    },
    fields: [
      {
        name: '–†–µ–π—Ç–∏–Ω–≥',
        value: topList || '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≤–∞–ª—é—Ç—É'
      }
    ]
  });
}

export function createExpTopEmbed(
  topUsers: Array<{ user: { discordId: string }, exp: bigint, level: number }>,
  limit: number,
  requestUser: User,
  guild?: Guild | null
): EmbedBuilder {
  const medals = ['ü•á', 'ü•à', 'ü•â'];

  let topList = '';
  for (let i = 0; i < topUsers.length; i++) {
    const user = topUsers[i];
    const prefix = i < 3 ? medals[i] : `${i + 1}.`;
    topList += `${prefix} <@${user.user.discordId}> ‚Äî **${user.exp}** XP (—É—Ä–æ–≤–µ–Ω—å ${user.level})\n`;
  }

  return createEmbed({
    title: `üåü –¢–æ–ø ${limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É`,
    description: '–°–∞–º—ã–µ –æ–ø—ã—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞',
    color: EmbedColors.EXP,
    timestamp: true,
    thumbnail: guild?.iconURL() || undefined,
    footer: {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${requestUser.username}`,
      iconURL: requestUser.displayAvatarURL()
    },
    fields: [
      {
        name: '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –æ–ø—ã—Ç—É',
        value: topList || '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –æ–ø—ã—Ç'
      }
    ]
  });
}

export function createCurrencyBalanceEmbed(targetUser: User, amount: bigint, requestUser: User): EmbedBuilder {
  return createEmbed({
    title: `üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
    description: `<@${targetUser.id}> –∏–º–µ–µ—Ç **${amount}** $`,
    color: EmbedColors.CURRENCY,
    timestamp: true,
    thumbnail: targetUser.displayAvatarURL(),
    footer: {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${requestUser.username}`,
      iconURL: requestUser.displayAvatarURL()
    }
  });
}

export function createExpEmbed(targetUser: User, exp: bigint, level: number, requestUser: User): EmbedBuilder {
  return createEmbed({
    title: `‚≠ê –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
    description: `<@${targetUser.id}> –∏–º–µ–µ—Ç **${exp}** –æ–ø—ã—Ç–∞`,
    color: EmbedColors.EXP,
    timestamp: true,
    thumbnail: targetUser.displayAvatarURL(),
    footer: {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${requestUser.username}`,
      iconURL: requestUser.displayAvatarURL()
    },
    fields: [
      {
        name: '–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å',
        value: `${level}`,
        inline: true
      }
    ]
  });
}


export function createProfileEmbed(
  targetUser: User,
  messageCount: bigint,
  voiceMinutes: bigint,
  exp: bigint | undefined,
  level: number | undefined,
  currency: bigint | undefined,
  requestUser: User
): EmbedBuilder {
  const voiceHours = Math.round(Number(voiceMinutes) / 6) / 10;
  const hoursString = getHoursString(voiceHours);
  const fields = [];

  if (level !== undefined) {
    fields.push({
      name: "‚≠ê –£—Ä–æ–≤–µ–Ω—å",
      value: `**${level}**`,
      inline: true
    });
  }

  if (exp !== undefined) {
    fields.push({
      name: "üåü –û–ø—ã—Ç",
      value: `**${exp}** XP`,
      inline: true
    });
  }

  fields.push(
    {
      name: "üìù –°–æ–æ–±—â–µ–Ω–∏–π",
      value: messageCount.toString(),
      inline: true
    },
    {
      name: "üéôÔ∏è –í –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
      value: `${voiceHours} ${hoursString}`,
      inline: true
    }
  );

  if (currency !== undefined) {
    fields.push({
      name: "üí∞ –ë–∞–ª–∞–Ω—Å",
      value: `${currency} $`,
      inline: true
    });
  }

  if (exp !== undefined && level !== undefined) {
    if (level < 20) {
      const nextLevelExp = calculateNextLevelExp(level);
      const remainingExp = nextLevelExp - exp;
      const progressPercentage = Number((Number(exp) / Number(nextLevelExp) * 100).toFixed(1));

      const progressBarTotal = 20;
      const filledBlocks = Math.floor(Number(progressPercentage) / 100 * progressBarTotal);
      const emptyBlocks = progressBarTotal - filledBlocks;
      const progressBar = '‚ñà'.repeat(filledBlocks) + '‚ñë'.repeat(emptyBlocks);

      fields.push(
        {
          name: "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å",
          value: `${progressBar}\n${progressPercentage}% –¥–æ —É—Ä–æ–≤–Ω—è ${level + 1}`,
          inline: false
        }
      );
    }
  }

  return createEmbed({
    title: `–ü—Ä–æ—Ñ–∏–ª—å ${targetUser.username}`,
    description: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUser.id}>`,
    color: EmbedColors.INFO,
    timestamp: true,
    thumbnail: targetUser.displayAvatarURL(),
    footer: {
      text: `–ó–∞–ø—Ä–æ—Å–∏–ª ${requestUser.username}`,
      iconURL: requestUser.displayAvatarURL()
    },
    fields: fields
  });
}
export function createCoinflipEmbed(
  userBet: Number,
  targetUser: User,
  userSide?: String,
  winMoney?: Number,
  result?: Number,
  botSide?: String,
): EmbedBuilder {
  let coinDescription = "–ú–æ–Ω–µ—Ç–∫–∞ –≤ –≤–æ–∑–¥—É—Ö–µ...";
  const fields = [];

  if (userSide !== undefined) {
    if (userSide == "eagle") {
      userSide = "–û—Ä—ë–ª";
    } else {
      userSide = "–†–µ—à–∫–∞"
    }
  }

  if (userBet !== undefined) {

    fields.push({
      name: "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞",
      value: `${userSide}, ${userBet}$`,
      inline: true
    })
  }

  if (botSide !== undefined) {
    if (botSide == "eagle") {
      botSide = "–æ—Ä–ª–æ–º";
    } else {
      botSide = "—Ä–µ—à–∫–æ–π"
    }
    coinDescription = `–ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ ${botSide}`;
  }

  if (result == 1 && result !== undefined) {
    fields.push({
      name: "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!",
      value: `–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ ${winMoney}$`,
      inline: true
    })
  }

  return createEmbed({
    title: `${targetUser.username} –ø–æ–¥–±—Ä–æ—Å–∏–ª –º–æ–Ω–µ—Ç–∫—É!`,
    description: coinDescription,
    color: EmbedColors.GAME,
    timestamp: true,
    thumbnail: targetUser.displayAvatarURL(),
    footer: {
      text: `–ò–≥—Ä–∞–µ—Ç ${targetUser.username}`,
      iconURL: targetUser.displayAvatarURL()
    },
    fields: fields
  });
}

export function createDuelEmbed(
  userBet: Number,
  executeUser: User,
  targetUser?: User,
  winMoney?: Number,
  winUser?: User,
): EmbedBuilder {
  let duelDescription = "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ";
  const fields = [];

  if (userBet !== undefined) {
    fields.push({
      name: "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞",
      value: `${userBet}$`,
      inline: true
    })
  }

  if (winUser !== undefined) {
    fields.push({
      name: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å",
      value: `${winUser}`,
      inline: true
    })
  }

  if (targetUser !== undefined) {
    fields.push({
      name: "–î—É—ç–ª—è–Ω—Ç",
      value: `${targetUser}`,
      inline: true
    })
  }

  if (winUser !== undefined) {
    fields.push({
      name: "–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞",
      value: `${winMoney}$`,
      inline: true
    })
  }

  return createEmbed({
    title: `${executeUser.username} –Ω–∞–∑–Ω–∞—á–∏–ª –¥—É—ç–ª—å`,
    description: duelDescription,
    color: EmbedColors.GAME,
    timestamp: true,
    thumbnail: executeUser.displayAvatarURL(),
    footer: {
      text: `–ò–≥—Ä–∞–µ—Ç ${executeUser.username}`,
      iconURL: executeUser.displayAvatarURL()
    },
    fields: fields
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞
 * @param results –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞
 * @param totalWin –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞
 * @param totalCost –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞
 * @param interaction –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * @returns –û–±—ä–µ–∫—Ç —ç–º–±–µ–¥–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
export function createGiftResultEmbed(
  results: GiftReward[],
  totalWin: number,
  totalCost: number,
  interaction: CommandInteraction
): EmbedBuilder {
  const profit = totalWin - totalCost;
  const isProfit = profit > 0;
  
  const embedColor = isProfit ? RARITY_COLORS.legendary : 
                    (totalWin === 0 ? RARITY_COLORS.common : RARITY_COLORS.rare);
  
  const embed = new EmbedBuilder()
      .setTitle(`‚ú® üéÅ –û–¢–ö–†–´–¢–ò–ï ${pluralizeGifts(results.length).toUpperCase()} üéÅ ‚ú®`)
      .setDescription(`<@${interaction.user.id}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç ${results.length} ${pluralizeGifts(results.length)}...`)
      .setColor(embedColor)
      .setTimestamp()
      .setThumbnail(interaction.user.displayAvatarURL({ size: 128 }));
  
  let valueText = '';
  let rewardTitle = '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–∞—Ä–∫–∏';
  for (let result of results){
    if (result.type === 'nothing') {
      valueText += `${result.emoji} –ü—É—Å—Ç–æ\n`
    } else {
      valueText += `${result.emoji} ${result.name} - ${result.amount}\n`
    }
  }

  embed.addFields({
      name: rewardTitle,
      value: `\`\`\`${valueText}\`\`\``
  });
  
  embed.addFields({
      name: '‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ',
      value: 'üìä **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç** üìä'
  });
  
  embed.addFields(
      {
          name: `${isProfit ? 'üìà' : 'üìâ'} –ò—Ç–æ–≥`,
          value: `\`${profit > 0 ? '+' : ''}${profit}$\``,
          inline: true
      }
  );
  
  if (isProfit) {
      embed.setFooter({ 
          text: 'üçÄ –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–±—ã–ª—å—é!',
          iconURL: interaction.user.displayAvatarURL()
      });
  } else if (totalWin === 0) {
      embed.setFooter({ 
          text: 'üòî –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ñ–æ—Ä—Ç—É–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –≤–∞–º –ª–∏—Ü–æ–º!',
          iconURL: interaction.user.displayAvatarURL()
      });
  } else {
      embed.setFooter({ 
          text: 'üé≤ –ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ 90% –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–∏–≥—Ä—ã—à–µ–º...',
          iconURL: interaction.user.displayAvatarURL()
      });
  }
  
  return embed;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ
 * @param bet –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
 * @param winAmount –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞
 * @param result –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (–º–Ω–æ–∂–∏—Ç–µ–ª—å, —ç–º–æ–¥–∑–∏, –æ–ø–∏—Å–∞–Ω–∏–µ)
 * @param interaction –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * @returns –û–±—ä–µ–∫—Ç —ç–º–±–µ–¥–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
export function createCasinoResultEmbed(
  bet: number,
  winAmount: number,
  result: CasinoResult,
  interaction: CommandInteraction
): EmbedBuilder {
  const profit = winAmount - bet;
  const isWin = profit > 0;
  
  const embedColor = profit > 0 ? RARITY_COLORS.legendary : 
                    (winAmount === bet ? RARITY_COLORS.rare : RARITY_COLORS.common);
  
  const embed = new EmbedBuilder()
      .setTitle(`${result.emoji} üé∞ –ö–ê–ó–ò–ù–û üé∞ ${result.emoji}`)
      .setDescription(`<@${interaction.user.id}> –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã...`)
      .setColor(embedColor)
      .setTimestamp()
      .setThumbnail(interaction.user.displayAvatarURL({ size: 128 }));
  
  let resultBlock;
  if (profit > 0) {
      resultBlock = `\`\`\`diff\n+ ${result.description}\n\`\`\``;
  } else if (winAmount === bet) {
      resultBlock = `\`\`\`fix\n${result.description}\n\`\`\``;
  } else {
      resultBlock = `\`\`\`diff\n- ${result.description}\n\`\`\``;
  }
  
  embed.addFields({
      name: `${result.emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç:`,
      value: resultBlock
  });
  
  embed.addFields({
      name: '‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ',
      value: 'üìä **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç** üìä'
  });
  
  embed.addFields(
      {
          name: 'üí∞ –°—Ç–∞–≤–∫–∞',
          value: `\`${bet}$\``,
          inline: true
      },
      {
          name: 'üí∏ –í—ã–∏–≥—Ä—ã—à',
          value: `\`${winAmount}$\``,
          inline: true
      },
      {
          name: `${isWin ? 'üìà' : 'üìâ'} –ü—Ä–æ—Ñ–∏—Ç`,
          value: `\`${profit > 0 ? '+' : ''}${profit}$\``,
          inline: true
      }
  );
  
  if (isWin) {
      embed.setFooter({ 
          text: 'üçÄ –£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!',
          iconURL: interaction.user.displayAvatarURL()
      });
  } else if (winAmount === bet) {
      embed.setFooter({ 
          text: 'üé≤ –í—ã –≤–µ—Ä–Ω—É–ª–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É. –ù–∏ –≤—ã–∏–≥—Ä—ã—à–∞, –Ω–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞.',
          iconURL: interaction.user.displayAvatarURL()
      });
  } else {
      embed.setFooter({ 
          text: 'üí∏ –ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ 90% –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–∏–≥—Ä—ã—à–µ–º...',
          iconURL: interaction.user.displayAvatarURL()
      });
  }
  
  return embed;
}